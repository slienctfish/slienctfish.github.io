<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/20/Apache%20shiro/</url>
      <content type="html"><![CDATA[<h2 id="apache-shiro-权限控制和缓存框架ehcache的使用"><a href="#apache-shiro-权限控制和缓存框架ehcache的使用" class="headerlink" title="apache shiro(权限控制和缓存框架ehcache的使用)"></a>apache shiro(权限控制和缓存框架ehcache的使用)</h2><h4 id="实现权限控制三种方式"><a href="#实现权限控制三种方式" class="headerlink" title="实现权限控制三种方式:"></a>实现权限控制三种方式:</h4><ol>
<li>spring security</li>
<li>apache shiro</li>
<li>自己写权限框架<h3 id="shiro-的结构："><a href="#shiro-的结构：" class="headerlink" title="shiro 的结构："></a>shiro 的结构：</h3></li>
</ol>
<ul>
<li>Authentication 用户登录</li>
<li>Authorization 授权</li>
<li>Cryptography 安全数据加密</li>
<li>Session Management 会话管理</li>
<li>Web Integration Web 系统集成</li>
<li>Interations 集成其他应用<h3 id="shiro的运行主要流程"><a href="#shiro的运行主要流程" class="headerlink" title="shiro的运行主要流程"></a>shiro的运行主要流程</h3></li>
<li>application code</li>
<li>subject（the current user）</li>
<li>shiro SecurityManager (manages all subject)</li>
<li>Realm (access your security data)<br>流程：应用程序–subject–securityManger–realm–安全数据<h3 id="shiro权限控制四中方式"><a href="#shiro权限控制四中方式" class="headerlink" title="shiro权限控制四中方式"></a>shiro权限控制四中方式</h3></li>
</ul>
<ol>
<li>配置filter实现url级别权限控制</li>
<li>配置代理，基于注解实现细粒度权限控制</li>
<li>在jsp页面中使用shiro自定义标签控制</li>
<li>程序中通过subject编程实现<h4 id="url权限控制（常用）"><a href="#url权限控制（常用）" class="headerlink" title="url权限控制（常用）"></a>url权限控制（常用）</h4></li>
</ol>
<ul>
<li><p>anon 未认证可以访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/login.html* = anon    登录页面所有人都可以访问</div></pre></td></tr></table></figure>
</li>
<li><p>authc 认证后可以访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/index.html = authc		主页是需要登录后访问的</div></pre></td></tr></table></figure>
</li>
<li><p>perms 需要特定的权限访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/pages/base/courier.html* = perms[courier:list]   ：冒号代表子权限</div></pre></td></tr></table></figure>
</li>
<li><p>roles 需要特定的角色访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/pages/base/area.html* = roles[base]</div></pre></td></tr></table></figure>
</li>
<li><p>user 需要特定的用户访问</p>
</li>
<li>reset 根据指定的http请求访问<h2 id="粗粒度URL级别权限控制"><a href="#粗粒度URL级别权限控制" class="headerlink" title="粗粒度URL级别权限控制"></a>粗粒度URL级别权限控制</h2></li>
</ul>
<ol>
<li><p>在pom文件中引入shiro的依赖  </p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置web.xml文件</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--在spring配置文件中需要有同名的bean存在--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置applicationContext-shiro.xml</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Shiro核心Filter  --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> </span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 安全管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 未认证，跳转到哪个页面  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 登录页面页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 认证后，没有权限跳转页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- shiro URL控制过滤器规则  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">			/login.html* = anon</div><div class="line">			/user_login.action* = anon</div><div class="line">			/validatecode.jsp* = anon</div><div class="line">			/css/** = anon</div><div class="line">			/js/** = anon</div><div class="line">			/images/** = anon</div><div class="line">			/services/** = anon </div><div class="line">			/pages/base/courier.html* = perms[courier:list]</div><div class="line">			/pages/base/area.html* = roles[base]</div><div class="line">			/** = authc</div><div class="line">		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在applicationContext-shiro.xml中配置安全管理器</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">&lt;!-- 安全管理器  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> </span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 自定义的realm 需要交于spring管理 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"bosRealm"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span></span></div><div class="line"><span class="tag">			<span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>UserAction 中得到subject对象，执行login</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(model.getUsername(), model.getPassword());</div><div class="line">subject.login(token);</div></pre></td></tr></table></figure>
</li>
<li><p>subject 调用securityManager，manager调用自定义的realm安全数据（自定义的realm继承AuthorizingRealm）</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BosRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span>	</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> RoleService roleService;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> PermissionService perssionService;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"shiro 授权管理..."</span>);</div><div class="line">		SimpleAuthorizationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</div><div class="line">		<span class="comment">//根据当前登陆用户查询对象角色和权限</span></div><div class="line">		Subject subject = SecurityUtils.getSubject();</div><div class="line">		User user = (User) subject.getPrincipal();</div><div class="line">		<span class="comment">//调用业务层，查询角色</span></div><div class="line">		List&lt;Role&gt; roles = roleService.findByUser(user);</div><div class="line">		<span class="keyword">for</span> (Role role : roles) &#123;</div><div class="line">			authenticationInfo.addRole(role.getKeyword());</div><div class="line">		&#125;</div><div class="line">		List&lt;Permission&gt; persssion = perssionService.findByUser(user);</div><div class="line">		<span class="keyword">for</span> (Permission permission : persssion) &#123;</div><div class="line">			authenticationInfo.addStringPermission(permission.getKeyword());</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//返回所有的角色和权限</span></div><div class="line">		<span class="keyword">return</span> authenticationInfo;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"shiro 认证管理..."</span>);</div><div class="line">		UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</div><div class="line">		User user = userService.findByUsername(usernamePasswordToken.getUsername());</div><div class="line">		<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//参数一：期望登录后保存在subject中的信息</span></div><div class="line">			<span class="comment">//参数二：如果返回为null，说明用户不存在</span></div><div class="line">			<span class="comment">//参数三：realm的名称</span></div><div class="line">			<span class="comment">// 表示用户不存在</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 表示用户存在--回到securityManager中比对密码是否正确</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(),	getName());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中将自定义realm注入到securityManager中，使manager能够找到realm</p>
</li>
<li>认证时常见的异常：<ul>
<li>org.apache.shiro.authc.UnknownAccountException  用户名不存在</li>
<li>org.apache.shiro.authc.IncorrectCredentialsException 用户输入的密码不正确<h2 id="细粒度方法级别权限控制"><a href="#细粒度方法级别权限控制" class="headerlink" title="细粒度方法级别权限控制"></a>细粒度方法级别权限控制</h2></li>
</ul>
</li>
<li><p>配置applicationContext-shiro.xml激活注解</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启shiro注解模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line"><span class="tag">	<span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>开发常用的shiro方法上的权限注解【注解是加在ServiceImpl上的】</p>
<ul>
<li>@requireAuthentication（需要登录）</li>
<li>@RequireUser（是否被记忆）</li>
<li>@requireGuest（未登录时允许访问的）</li>
<li>@requireRoles（需要角色）</li>
<li>@requirePermissions（需要权限）</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"courier:add"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Courier courier)</span> </span>&#123;</div><div class="line">	courierRepository.save(courier);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>有时需要针对ServiceImpl进行代理<br>配置spring 的事务管理，以继承方式创建代理</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--注解管理事务--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置shiro的注解模式参数</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启shiro注解模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line"><span class="tag"><span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用shiro标签元素，实现页面元素的显示控制"><a href="#使用shiro标签元素，实现页面元素的显示控制" class="headerlink" title="使用shiro标签元素，实现页面元素的显示控制"></a>使用shiro标签元素，实现页面元素的显示控制</h2><ol>
<li><p>页面引入shiro标签库</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> prefix=<span class="string">"shiro"</span> %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用shiro标签实现显示的代码</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:add"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:edit"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:delete"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:list"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>查询<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="在shiro中使用缓存框架（优化）"><a href="#在shiro中使用缓存框架（优化）" class="headerlink" title="在shiro中使用缓存框架（优化）"></a>在shiro中使用缓存框架（优化）</h2><p>使用缓存技术后，第一次从数据库中去取数据，第二次从缓存中取数据（缓存是内容中的速度快）</p>
<ol>
<li><p>spring和ehcache框架整合（导入依赖）</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置ehcache.xml(解压ehcahce-core.jar包，得到ehcache-failsafe.xml)</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">defaultCache</span></span></div><div class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></div><div class="line"><span class="tag">           <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置spring整合ehcache</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 缓存配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ehcache对登录认证业务数据进行缓存"><a href="#ehcache对登录认证业务数据进行缓存" class="headerlink" title="ehcache对登录认证业务数据进行缓存"></a>ehcache对登录认证业务数据进行缓存</h3><ol>
<li><p>配置shiro整合ehcache完成授权数据缓存</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro封装cacheManager--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehCacheManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将shiro缓存管理器，注入到安全管理器中</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 安全管理器  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> </span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"bosRealm"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"shiroCacheManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>对认证数据，授权数据，进行选择性缓存（配置realm bean）</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置realm --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bosRealm"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.bos.shiro.BosRealm"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authorizationCacheName"</span> <span class="attr">value</span>=<span class="string">"bos"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ehcache对普通业务数据进行缓存"><a href="#ehcache对普通业务数据进行缓存" class="headerlink" title="ehcache对普通业务数据进行缓存"></a>ehcache对普通业务数据进行缓存</h3><ol>
<li>常用的注解<ol>
<li>@Cacheable   设置缓存位置<ul>
<li>应用缓存区，对方法返回结果进行缓存，用于查询方法</li>
</ul>
</li>
<li>@CacheEvict  清空缓存<ul>
<li>清除缓存区数据，用于增加，修改、删除方法</li>
</ul>
</li>
</ol>
</li>
<li><p>配置spring缓存管理器，封装ehcache自带的CacheManager</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- spring 封装ehcache缓存管理器 --&gt;</div><div class="line">&lt;bean id=&quot;springCacheManager&quot; class=&quot;org.springframework.cache.ehcache.EhCacheCacheManager&quot;&gt;</div><div class="line">	&lt;property name=&quot;cacheManager&quot; ref=&quot;ehCacheManager&quot;&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中引入cache的名称空间</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xmlns:cache="http://www.springframework.org/schema/cache"</div><div class="line">xsi:schemaLocation="</div><div class="line">http://www.springframework.org/schema/cache </div><div class="line">http://www.springframework.org/schema/cache/spring-cache.xsd "&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>激活spring缓存注解</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 激活spring 缓存注解--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"springCacheManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意点：需要进行缓存的数据要实现<strong>Serializable</strong>接口</p>
<h3 id="有参数的方法进行缓存"><a href="#有参数的方法进行缓存" class="headerlink" title="有参数的方法进行缓存"></a>有参数的方法进行缓存</h3></li>
<li>需要使用SpEL表达式–示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">@Cacheable(value=&quot;bos&quot;,key=&quot;#pageable.pageNum+&apos;_&apos;+#pageable.pageSize&quot;)</div><div class="line">public Page&lt;Courier&gt; findAll(Specification specification, Pageable pageable)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/20/apache%20poi/</url>
      <content type="html"><![CDATA[<h2 id="Apache-POI技术-读取和生成excel文件"><a href="#Apache-POI技术-读取和生成excel文件" class="headerlink" title="Apache POI技术 读取和生成excel文件"></a>Apache POI技术 读取和生成excel文件</h2><ol>
<li><p>读取excel文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">HSSFWorkbook workbook = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	workbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line">	</div><div class="line">HSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>);</div><div class="line">	</div><div class="line">List&lt;Area&gt; areas = <span class="keyword">new</span> ArrayList&lt;Area&gt;();</div><div class="line">	</div><div class="line"><span class="keyword">for</span> (Row row : sheet) &#123;</div><div class="line">	System.out.println(<span class="string">"read data"</span>);</div><div class="line">	<span class="comment">// 跳过第一行</span></div><div class="line">	<span class="keyword">if</span> (row.getRowNum() == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 跳过空行</span></div><div class="line">	<span class="keyword">if</span> (row.getCell(<span class="number">0</span>) == <span class="keyword">null</span> || StringUtils.isBlank(row.getCell(<span class="number">0</span>).getStringCellValue())) &#123;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	Area area = <span class="keyword">new</span> Area();</div><div class="line">	</div><div class="line">	area.setId(row.getCell(<span class="number">0</span>).getStringCellValue());</div><div class="line">	area.setProvince(row.getCell(<span class="number">1</span>).getStringCellValue());</div><div class="line">	area.setCity(row.getCell(<span class="number">2</span>).getStringCellValue());</div><div class="line">	area.setDistrict(row.getCell(<span class="number">3</span>).getStringCellValue());</div><div class="line">	area.setPostcode(row.getCell(<span class="number">4</span>).getStringCellValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>生成excel文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">List&lt;WayBill&gt; wayBills = wayBillService.findWayBills(model);</div><div class="line"></div><div class="line">HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">HSSFSheet sheet = hssfWorkbook.createSheet(<span class="string">"运单数据"</span>);</div><div class="line"></div><div class="line"><span class="comment">//表头</span></div><div class="line">HSSFRow headRow = sheet.createRow(<span class="number">0</span>);</div><div class="line">headRow.createCell(<span class="number">0</span>).setCellValue(<span class="string">"运单号"</span>);</div><div class="line">headRow.createCell(<span class="number">1</span>).setCellValue(<span class="string">"寄件人"</span>);</div><div class="line">headRow.createCell(<span class="number">2</span>).setCellValue(<span class="string">"寄件人电话"</span>);</div><div class="line">headRow.createCell(<span class="number">3</span>).setCellValue(<span class="string">"寄件人地址"</span>);</div><div class="line">headRow.createCell(<span class="number">4</span>).setCellValue(<span class="string">"收件人"</span>);</div><div class="line">headRow.createCell(<span class="number">5</span>).setCellValue(<span class="string">"收件人电话"</span>);</div><div class="line">headRow.createCell(<span class="number">6</span>).setCellValue(<span class="string">"收件人地址"</span>);</div><div class="line"></div><div class="line"><span class="comment">//表格数据</span></div><div class="line"><span class="keyword">for</span> (WayBill wayBill: wayBills) &#123;</div><div class="line">	HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum()+<span class="number">1</span>);</div><div class="line">	dataRow.createCell(<span class="number">0</span>).setCellValue(wayBill.getWayBillNum());</div><div class="line">	dataRow.createCell(<span class="number">1</span>).setCellValue(wayBill.getSendName());</div><div class="line">	dataRow.createCell(<span class="number">2</span>).setCellValue(wayBill.getSendMobile());</div><div class="line">	dataRow.createCell(<span class="number">3</span>).setCellValue(wayBill.getSendAddress());</div><div class="line">	dataRow.createCell(<span class="number">4</span>).setCellValue(wayBill.getRecName());</div><div class="line">	dataRow.createCell(<span class="number">5</span>).setCellValue(wayBill.getRecMobile());</div><div class="line">	dataRow.createCell(<span class="number">6</span>).setCellValue(wayBill.getRecAddress());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> poi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（QRcode,fileReader）]]></title>
      <url>/2017/08/20/code004/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=381433&auto=1&height=66"></iframe>

<h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><h3 id="使用js，在本地生成二维码"><a href="#使用js，在本地生成二维码" class="headerlink" title="使用js，在本地生成二维码"></a>使用js，在本地生成二维码</h3><p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank" rel="external">QRcode的基本介绍</a><br>基本使用方法，最终生成的是h5的一个canvas元素，不能选中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery.qrcode/1.0/jquery.qrcode.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;div id=<span class="string">"code"</span>&gt;&lt;/div&gt; </div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="string">"#code"</span>).qrcode(&#123; </div><div class="line">    render: <span class="string">"table"</span>, <span class="comment">//table方式 </span></div><div class="line">    width: <span class="number">200</span>, <span class="comment">//宽度 </span></div><div class="line">    height:<span class="number">200</span>, <span class="comment">//高度 </span></div><div class="line">    text: <span class="string">"www.helloweba.com"</span> <span class="comment">//任意内容 </span></div><div class="line">&#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li><a href="https://segmentfault.com/q/1010000004988831" target="_blank" rel="external">如何将canvas标签中的内容编程img标签，显示到页面上</a>   </li>
<li><a href="https://www.baidufe.com/item/65c055482d26ec59e27e.html" target="_blank" rel="external">将canvas中的内容变成img，并强制浏览器进行下载</a> </li>
</ol>
<h3 id="原生js中有一个fileReader对象可以实现在上传之前的图片预览"><a href="#原生js中有一个fileReader对象可以实现在上传之前的图片预览" class="headerlink" title="原生js中有一个fileReader对象可以实现在上传之前的图片预览"></a>原生js中有一个fileReader对象可以实现在上传之前的图片预览</h3><h3 id="多文件上传，-file中有一个multiple属性可以满足需求"><a href="#多文件上传，-file中有一个multiple属性可以满足需求" class="headerlink" title="多文件上传， file中有一个multiple属性可以满足需求"></a>多文件上传， file中有一个multiple属性可以满足需求</h3><h2 id="服务端技术"><a href="#服务端技术" class="headerlink" title="服务端技术"></a>服务端技术</h2><ol>
<li>oracle数据库中的特殊类型，使用“select * from table”的方式查询，得到的基础平台框架自动包装clog类型，在前台中解析为一个json对象类型。<ul>
<li>解决办法：使用sql语句解决<a href="http://blog.csdn.net/wumingqian_137229/article/details/48438959" target="_blank" rel="external">dbms_lob.substr(clob字段，4000,1)</a></li>
<li>或者使用java代码进行解决。</li>
</ul>
</li>
<li><a href="http://www.eclipse.org/webtools/" target="_blank" rel="external">web-tool-platform官方地址</a>  wtp是webtoolplant，web开发的平台工具</li>
<li><a href="http://blog.csdn.net/jbgtwang/article/details/44077853" target="_blank" rel="external">不安装WTP全包怎么添加Tomcat8到Eclipse Kepler中</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 服务端 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（git,ODS_压缩，解压缩、文件夹监听）]]></title>
      <url>/2017/08/20/code003/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>解释：项目由开发小组共同开发，由大部分人一起开发的部分叫做trunk（主干），当已经发布的程序出现问题，且trunk还在继续开发时，就需要新创建一个branch分支。</p>
<p>冲突：当开发人员因为不同需求需要修改同一项目中的相同文件位置时，就出现了冲突。<br>需要首先做对比，按照需求合并，然后强迫强制提交。</p>
<p>如果项目开发中出现了分支，当进行pull操作时，能够将所有分支上的内容下载到本地。<br>节点，项目开发到一个版本结束的时候需要打一个节点。标志项目的一个里程碑的结束。</p>
<h3 id="ODS之文件压缩和解压缩"><a href="#ODS之文件压缩和解压缩" class="headerlink" title="ODS之文件压缩和解压缩"></a>ODS之文件压缩和解压缩</h3><ol>
<li>解压缩</li>
<li>整理，建立文件夹，放文件</li>
<li>压缩</li>
<li>分发<a id="more"></a>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	File zipfile = <span class="keyword">new</span> File(<span class="string">"C:/Users/Administrator/Desktop/ods.zip"</span>);</div><div class="line">	String destDir = <span class="string">"C:/Users/Administrator/Desktop"</span>;</div><div class="line">	<span class="keyword">if</span> (StringUtils.isBlank(destDir)) &#123;</div><div class="line">		destDir = zipfile.getParent();</div><div class="line">	&#125;</div><div class="line">	destDir = destDir.endsWith(File.separator) ? destDir : destDir + File.separator;</div><div class="line">	ZipArchiveInputStream is = <span class="keyword">null</span>;</div><div class="line">	List&lt;String&gt; fileNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		is = <span class="keyword">new</span> ZipArchiveInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(zipfile), <span class="number">8192</span>));</div><div class="line">		ZipArchiveEntry entry = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">while</span> ((entry = is.getNextZipEntry()) != <span class="keyword">null</span>) &#123;</div><div class="line">			fileNames.add(entry.getName());</div><div class="line">			<span class="keyword">if</span> (entry.isDirectory()) &#123;</div><div class="line">				File directory = <span class="keyword">new</span> File(destDir, entry.getName());</div><div class="line">				directory.mkdirs();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				OutputStream os = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					os = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destDir, entry.getName())),</div><div class="line">							<span class="number">8192</span>);</div><div class="line">					IOUtils.copy(is, os);</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					IOUtils.closeQuietly(os);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> e;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		IOUtils.closeQuietly(is);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (String string : fileNames) &#123;</div><div class="line">		<span class="keyword">if</span>(string.endsWith(<span class="string">"/"</span>))&#123;</div><div class="line">			System.out.println(<span class="string">"文件夹："</span>+string);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"文    件："</span>+string);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"finished"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>主要是流的变化和处理，写出时是按照，压缩文件为一个整体的思想进行写出的所以不需要运用递归的写法将数据写出<br>压缩的时候相当于往里面写文件，需要递归地写。相当于把系统中的数据递归地写到一个黑匣子里面</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	String srcFilepath = <span class="string">"C:\\Users\\Administrator\\Desktop\\ad"</span>;</div><div class="line">	File srcFile = <span class="keyword">new</span> File(srcFilepath);</div><div class="line">	String destFilepath = srcFile.getAbsolutePath() + <span class="string">".zip"</span>;</div><div class="line">	File destFile = <span class="keyword">new</span> File(destFilepath);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (srcFile.exists()) &#123;</div><div class="line">		ZipArchiveOutputStream out = <span class="keyword">new</span> ZipArchiveOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (srcFile.isDirectory()) &#123;</div><div class="line">				File[] files = srcFile.listFiles();</div><div class="line">				<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">					zip(srcFile, file, out);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile), <span class="number">8192</span>);</div><div class="line">					ZipArchiveEntry entry = <span class="keyword">new</span> ZipArchiveEntry(srcFile.getName());</div><div class="line">					entry.setSize(srcFile.length());</div><div class="line">					out.putArchiveEntry(entry);</div><div class="line">					IOUtils.copy(is, out);</div><div class="line">					out.closeArchiveEntry();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					IOUtils.closeQuietly(is);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			IOUtils.closeQuietly(out);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">(File root, File parent, ZipArchiveOutputStream zipArchiveOutputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">if</span> (parent.exists()) &#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (parent.isDirectory()) &#123;</div><div class="line">			File[] files = parent.listFiles();</div><div class="line">			<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">				zip(root, file, zipArchiveOutputStream);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(parent), <span class="number">8192</span>);</div><div class="line">				ZipArchiveEntry entry = <span class="keyword">new</span> ZipArchiveEntry(parent,</div><div class="line">						parent.getAbsolutePath().replace(root.getAbsolutePath(), <span class="string">""</span>));</div><div class="line">				entry.setSize(parent.length());</div><div class="line">				zipArchiveOutputStream.putArchiveEntry(entry);</div><div class="line">				IOUtils.copy(is, zipArchiveOutputStream);</div><div class="line">				zipArchiveOutputStream.closeArchiveEntry();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				IOUtils.closeQuietly(is);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="ODS之文件内容监控"><a href="#ODS之文件内容监控" class="headerlink" title="ODS之文件内容监控"></a>ODS之文件内容监控</h3><p>需要使用Java.io 包中的文件和 commons.io 的子包monitor包中的文件观察类和文件监听类<br>可以实现对文件和文件夹的的监听。包括文件的创建，文件的删除</p>
<ol>
<li>监听开启后，每隔一段时间进行一次观察和检测</li>
<li>监听需要确定检测的时间间隔</li>
<li>监听需要传入一个观察者对象</li>
<li>监听需要传入一个监听者对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZJPFileMonitor</span> </span>&#123;  </div><div class="line">    FileAlterationMonitor monitor = <span class="keyword">null</span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZJPFileMonitor</span><span class="params">(<span class="keyword">long</span> interval)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        monitor = <span class="keyword">new</span> FileAlterationMonitor(interval);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String path, FileAlterationListener listener)</span> </span>&#123;  </div><div class="line">        FileAlterationObserver observer = <span class="keyword">new</span> FileAlterationObserver(<span class="keyword">new</span> File(path));  </div><div class="line">        monitor.addObserver(observer);  </div><div class="line">        observer.addListener(listener);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        monitor.stop();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        monitor.start();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        ZJPFileMonitor m = <span class="keyword">new</span> ZJPFileMonitor(<span class="number">5000</span>);  </div><div class="line">        m.monitor(<span class="string">"E:\\filepath"</span>,<span class="keyword">new</span> ZJPFileListener());  </div><div class="line">        m.start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<!-- -->
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZJPFileListener</span> <span class="keyword">implements</span> <span class="title">FileAlterationListener</span></span>&#123;</div><div class="line">			</div><div class="line">	ZJPFileMonitor monitor = <span class="keyword">null</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</div><div class="line">		<span class="comment">//System.out.println("onStart");</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryCreate</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryCreate:"</span> +  directory.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryChange</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryChange:"</span> + directory.getName());</div><div class="line">	&#125;	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryDelete</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryDelete:"</span> + directory.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileCreate</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileCreate:"</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileChange</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileCreate : "</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileDelete</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileDelete :"</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</div><div class="line">		<span class="comment">//System.out.println("onStop");</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（svn,hibernate）]]></title>
      <url>/2017/08/20/code002/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>枚举类型：A,B,C,D;   可以有构造方法  可以有函数<br>A(1,2,3) 三个参数都是构造属性  属性和一些方法用来返回属性</li>
</ul>
<h2 id="svn项目导入-webRoot-gt-webContent"><a href="#svn项目导入-webRoot-gt-webContent" class="headerlink" title="svn项目导入(webRoot-&gt;webContent)"></a>svn项目导入(webRoot-&gt;webContent)</h2><h3 id="先导入到本地再导入到eclipse中"><a href="#先导入到本地再导入到eclipse中" class="headerlink" title="先导入到本地再导入到eclipse中"></a>先导入到本地再导入到eclipse中</h3><ol>
<li>先将项目内容复制到本地，将项目内容进行备份，将备份的数据与svn服务器的链接断开。</li>
<li>新建动态网页项目，注意将内容输出值进行修改，WebRoot/WEB-INF/classes  将项目的主要内容文件夹设置为webRoot。</li>
<li>最后将备份后的项目数据导入到本地集成开发环境中(以文件系统的方式)</li>
</ol>
<h3 id="使用集成开发环境中的svn插件进行项目检出"><a href="#使用集成开发环境中的svn插件进行项目检出" class="headerlink" title="使用集成开发环境中的svn插件进行项目检出"></a>使用集成开发环境中的svn插件进行项目检出</h3><ol>
<li>将项目导入到集成开发环境中，作为本地的项目导出</li>
<li>修改项目在本地路径中的配置文件，setting文件夹下的org.eclipse.wst.common.component,修改里面的source-path<br><code>&lt;wb-resource deploy-path=&quot;/&quot; source-path=&quot;/WebRoot&quot; tag=&quot;defaultRootSource&quot;/&gt;</code></li>
<li>修改项目根目录下的.classpath文件下的内容，修改path的值<br><code>&lt;classpathentry kind=&quot;output&quot; path=&quot;WebRoot/WEB-INF/classes&quot;/&gt;</code><h2 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h2><h3 id="Criteria-QBC-查询方法"><a href="#Criteria-QBC-查询方法" class="headerlink" title="Criteria  QBC 查询方法"></a>Criteria  QBC 查询方法</h3></li>
<li>criteria.add(crtierition)  criterion类的主要的三个子类：Example junction simpleExpression<a id="more"></a>
<h3 id="Criteria-和-DetachedCriteria"><a href="#Criteria-和-DetachedCriteria" class="headerlink" title="Criteria 和 DetachedCriteria"></a>Criteria 和 DetachedCriteria</h3></li>
</ol>
<p>CriteriaSpecification 是一个接口， Criteria 是CriteriaSpecifiction的子接口<br>DetachedCriteria是CriteriaSpecification的一个实现类<br>Criteria是在线查询，需要由HIbernate Sesison创建<br>DetachedCriteria是离线的，使用了装饰者模式，包装了一个CriteriaImpl Criteria的实现<br>Criteria可以<code>addOrder(Order.asc(&quot;field&quot;))</code>  <code>setMaxResult(50)</code></p>
<p>设置查询条件:使用Criterion 和 Projection</p>
<p>可以使用Criterion和Projection设置查询条件</p>
<p>Criterion条件是一个接口，实现类包括Example(例子)、Junction(连接)[conjunction disjunction]、SimpleExpression(简单表达式)</p>
<p>使用Restrictions工具类创建Criterion对象，可以创建除Example之外的其他类型的Criterion</p>
<p>Project主要有SimpleProjection、ProjectionList和Property三个实现<br>Property 是对某个字段进行查询条件设置，<code>Property.forName(&quot;color&quot;).in({数组});</code><br>（聚合函数）</p>
<p>DetachedCriteria 和Criteria之间的相互转换<br><code>detachedCriteria.getExecutableCriteria(Sesision)</code></p>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（ajax-sync，闭包）]]></title>
      <url>/2017/08/20/code001/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><ul>
<li><p>如何解决页面中具有相同id的对象的问题：如在两个页面中同时存在id为datagrid的表格，在对象后面添加.element();为对象ID添加时间戳  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">element: function() &#123;</div><div class="line">   var idStr = this.attr(&apos;id&apos;) + &apos;_&apos; + new Date().getTime();</div><div class="line">   this.attr(&apos;id&apos;, idStr);</div><div class="line">   return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编码风格：将同一类型的或者完成相似功能的函数，定义到统一对象中，方便调用</p>
</li>
<li><p>js中闭包的好处：</p>
<ul>
<li>什么是闭包</li>
<li>闭包就是能够在函数内部读取函数外部的变量的一座桥梁  </li>
<li>闭包的作用：  <ol>
<li>可以读取到函数内部的数据</li>
<li>闭包让变量始终存在于内存中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;;   </div><div class="line">　　var object = &#123;   </div><div class="line">　　　　name : &quot;My Object&quot;,   </div><div class="line">　　　　getNameFunc : function()&#123;   </div><div class="line">　　　　　　return function()&#123;   </div><div class="line">　　　　　　　　return this.name;   </div><div class="line">　　　　　&#125;;   </div><div class="line">　　　　&#125;   </div><div class="line">&#125;;   </div><div class="line">alert(object.getNameFunc()());  //The Window</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><p>在匿名函数前面加上这些符号后，就把一个函数声明语句变成了一个函数表达式，是表达式就会在script标签中自动执行。</p>
</li>
<li>ajax请求中的asyn 该值默认为true，即进行同步请求，当该值为false时，该ajax请求将会被锁死,适用于异步请求之后的代码，需要用到此次异步请求中返回的数据。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;  </div><div class="line">        async: false,  </div><div class="line">        type : &quot;GET&quot;,  </div><div class="line">        url : &apos;tet.php&apos;,  </div><div class="line">        complete: function(msg)&#123;  </div><div class="line">            alert(&apos;complete&apos;);  </div><div class="line">        &#125;,  </div><div class="line">        success : function(data) &#123;  </div><div class="line">            alert(&apos;success&apos;);  </div><div class="line">            temp=data;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    alert(temp+&apos;end&apos;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于hacker的信仰]]></title>
      <url>/2017/08/20/note/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=483671599&auto=0&height=66"></iframe>

<h2 id="hacker的信仰"><a href="#hacker的信仰" class="headerlink" title="hacker的信仰"></a>hacker的信仰</h2><ol>
<li>The world is full of fascinating problems waiting to be solved.</li>
<li>No problem should ever have to be solved twice.</li>
<li>Boredom and drudgery are evil.</li>
<li>Freedom is good.</li>
<li>Attitude is so subsititute for competence.<blockquote>
<p>1、这个世界充满了待解决的迷人问题<br>2、一个问题都不应该被解决两次<br>3、无趣和乏味的工作是犯罪<br>4、追求自由<br>5、态度不能代替能力（态度无法替代技术）</p>
</blockquote>
</li>
</ol>
<h3 id="程序设计基本原则"><a href="#程序设计基本原则" class="headerlink" title="程序设计基本原则"></a>程序设计基本原则</h3><pre><code>模块原则：使用简洁的接口拼合简单的部件
清晰原则：清晰胜于机巧
组合原则：设计时，考虑拼接组合
分离原则：策略同机制分离，接口同引擎分离
简洁原则：设计要简洁，复杂度能低则低
吝啬原则：除非确无他法，不要编写庞大的程序
透明性原则：设计要可见，以便审查和调试
健壮性原则：健壮性源于透明和简洁
通俗原则：接口设计避免标新立异
表示原则：把知识叠入数据以求逻辑质朴而健壮
缄默原则：如果一个程序没什么好说的，就沉默
经济原则：宁花机器一分，不花程序员一秒
补救原则：出现异常时，马上退出并给出足够的错误信息
生成原则：避免手工hack，尽量编写程序去生成程序
优化原则：雕琢前先要有原型，跑之前先学会走
多样原则：决不相信所谓“不二法门”的断言
扩展原则：设计着眼未来，未来总比预想来的快
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用工具网站介绍]]></title>
      <url>/2017/08/14/vpn_help/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66"></iframe>

<h2 id="Common-sites"><a href="#Common-sites" class="headerlink" title="Common sites"></a>Common sites</h2><h3 id="网站索引导航"><a href="#网站索引导航" class="headerlink" title="网站索引导航"></a>网站索引导航</h3><ol>
<li><a href="http://taoxiaozhong.com/" target="_blank" rel="external">淘小众</a></li>
<li><a href="http://www.gogeeks.cn/" target="_blank" rel="external">极客导航</a></li>
<li><a href="https://s.geekbang.org/" target="_blank" rel="external">极客搜索</a><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3></li>
<li><a href="https://sdk.cn/news/4723" target="_blank" rel="external">免费科学上网镜像和工具</a></li>
<li><a href="https://pac.itzmx.com/" target="_blank" rel="external">浏览器代理科学上网</a><h3 id="壁纸下载网站"><a href="#壁纸下载网站" class="headerlink" title="壁纸下载网站"></a>壁纸下载网站</h3></li>
<li><a href="http://www.10wallpaper.com/" target="_blank" rel="external">tenBeauty</a></li>
<li><a href="http://sf.co.ua/" target="_blank" rel="external">Wallpapers</a><h3 id="vip视频解析网站"><a href="#vip视频解析网站" class="headerlink" title="vip视频解析网站"></a>vip视频解析网站</h3></li>
<li><a href="http://www.tufutv.com/" target="_blank" rel="external">屠夫网</a></li>
<li><a href="http://ifkdy.com" target="_blank" rel="external">疯狂影视搜索</a><a id="more"></a>
<h3 id="vip音乐解析网站"><a href="#vip音乐解析网站" class="headerlink" title="vip音乐解析网站"></a>vip音乐解析网站</h3></li>
<li><a href="http://www.liumingye.cn/tools/music/" target="_blank" rel="external">vip音乐解析</a></li>
<li><a href="http://music.liuzhijin.cn/" target="_blank" rel="external">音乐直连搜索</a></li>
<li><a href="http://www.66re.cn/vip/163.html" target="_blank" rel="external">全能vip音乐解析</a><h3 id="网站视频地址解析-另存为即下载"><a href="#网站视频地址解析-另存为即下载" class="headerlink" title="网站视频地址解析(另存为即下载)"></a>网站视频地址解析(另存为即下载)</h3></li>
<li><a href="http://www.flvurl.cn/Default.aspx" target="_blank" rel="external">点量视频解析</a></li>
<li><a href="http://savevideo.me/" target="_blank" rel="external">国外视频网站解析</a><h3 id="微信-amp-二维码"><a href="#微信-amp-二维码" class="headerlink" title="微信&amp;二维码"></a>微信&amp;二维码</h3></li>
<li><a href="http://cli.im/text" target="_blank" rel="external">草料二维码</a></li>
<li><a href="http://www.liantu.com/" target="_blank" rel="external">联图二维码</a></li>
<li><a href="http://jiema.wwei.cn/" target="_blank" rel="external">二维码在线解析</a></li>
<li><a href="http://www.vjietu.com/" target="_blank" rel="external">微信聊天界面生成工具</a></li>
<li><a href="http://bj.96weixin.com/" target="_blank" rel="external">微信公众号内容编辑工具</a><h2 id="Coder-sites"><a href="#Coder-sites" class="headerlink" title="Coder sites"></a>Coder sites</h2><h3 id="系统下载网站"><a href="#系统下载网站" class="headerlink" title="系统下载网站"></a>系统下载网站</h3></li>
<li><a href="http://www.imsdn.cn/" target="_blank" rel="external">windows操作系统镜像下载</a></li>
<li><a href="http://www.linuxdown.net/" target="_blank" rel="external">linux操作系统镜像下载</a></li>
<li><a href="http://blog.csdn.net/youlianying/article/details/5411521" target="_blank" rel="external">各系统官方网站列表</a><h3 id="开发资源网站"><a href="#开发资源网站" class="headerlink" title="开发资源网站"></a>开发资源网站</h3></li>
<li><a href="http://maven.aliyun.com/nexus/#welcome" target="_blank" rel="external">阿里巴巴mave私服_jar包下载</a></li>
<li><a href="http://cdn.code.baidu.com/" target="_blank" rel="external">百度静态资源库</a></li>
<li><a href="http://www.bootcdn.cn/" target="_blank" rel="external">bootCDN静态资源下载</a><h3 id="开发者讯息"><a href="#开发者讯息" class="headerlink" title="开发者讯息"></a>开发者讯息</h3></li>
<li><a href="https://toutiao.io/explore" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn/" target="_blank" rel="external">Infoq中国站</a></li>
<li><a href="https://www.oschina.net/" target="_blank" rel="external">开源中国</a><h3 id="网页浏览工具"><a href="#网页浏览工具" class="headerlink" title="网页浏览工具"></a>网页浏览工具</h3></li>
<li><a href="http://www.100ec.cn/zt/data/" target="_blank" rel="external">脚本之家在线工具</a></li>
<li><a href="http://tool.oschina.net/" target="_blank" rel="external">开源中国在线工具</a></li>
<li><a href="http://tool.lu/" target="_blank" rel="external">程序员工具箱</a><h2 id="Pmer-sites"><a href="#Pmer-sites" class="headerlink" title="Pmer sites"></a>Pmer sites</h2><h3 id="音乐电台"><a href="#音乐电台" class="headerlink" title="音乐电台"></a>音乐电台</h3></li>
<li><a href="http://51.ruyo.net/p/4681.html" target="_blank" rel="external">落网</a><h3 id="电商资讯"><a href="#电商资讯" class="headerlink" title="电商资讯"></a>电商资讯</h3></li>
<li><a href="http://www.ebrun.com/" target="_blank" rel="external">亿邦动力</a></li>
<li><a href="http://www.iresearch.cn/" target="_blank" rel="external">艾瑞网</a></li>
<li><a href="http://www.paidai.com/" target="_blank" rel="external">派代网</a></li>
<li><a href="http://www.100ec.cn/" target="_blank" rel="external">中国电子商务研究中心</a><h3 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h3></li>
<li><a href="http://www.woshipm.com/" target="_blank" rel="external">人人都是产品经理</a><h3 id="数据中心"><a href="#数据中心" class="headerlink" title="数据中心"></a>数据中心</h3></li>
<li><a href="http://www.cnnic.net.cn/" target="_blank" rel="external">中国互联网络信息中心</a></li>
<li><a href="http://www.100ec.cn/zt/data/" target="_blank" rel="external">中国电子商务数据中心</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/13/Code_note/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/ysydao/article/details/40181611" target="_blank" rel="external">产品经理小帖子</a></p>
<pre><code>精华内容摘要：
1、产品经理有一个毛病就是喜欢虚构一个功能出来，然后觉得用户一定要使用你的东西，不然就弄死他。  
2、我们做一个产品一定要抓住硬需求，也就是用户不用你这个东西他就觉得浑身难受。    
3、你又在想着怎么忽悠用户进来，然后再虐待他。
</code></pre><a id="more"></a>
<h2 id="行唐积分兑换系统基本分析"><a href="#行唐积分兑换系统基本分析" class="headerlink" title="行唐积分兑换系统基本分析"></a>行唐积分兑换系统基本分析</h2><h3 id="系统用户"><a href="#系统用户" class="headerlink" title="系统用户"></a>系统用户</h3><p><a href="#jump2">XXXX</a></p>
<ol>
<li>微信端用户（微信用户）<ul>
<li>用户绑定</li>
<li>积分查询</li>
<li>积分兑换</li>
</ul>
</li>
<li>服务端用户（前台柜员）<ul>
<li>积分规则查询</li>
<li>积分消费登记</li>
<li>积分预授权</li>
<li>积分冻结</li>
</ul>
</li>
<li>管理端用户（系统管理者）<ul>
<li>积分规则配置</li>
<li>商品管理</li>
<li>风险日志控制</li>
<li>活动，资讯，通知内容发布<h3 id="系统基本逻辑角色"><a href="#系统基本逻辑角色" class="headerlink" title="系统基本逻辑角色"></a>系统基本逻辑角色</h3></li>
</ul>
</li>
<li>用户角色实体<ul>
<li>微信用户</li>
<li>服务端用户</li>
<li>管理端用户</li>
</ul>
</li>
<li>积分规则实体<ul>
<li>基本积分规则</li>
<li>特殊积分规则</li>
</ul>
</li>
<li>日志风险实体<ul>
<li>各种风险的实体</li>
</ul>
</li>
<li>活动资讯实体<ul>
<li>新闻的标题，内容</li>
</ul>
</li>
<li>商品管理<ul>
<li>主要是商品的内容管理CMS<h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2></li>
</ul>
</li>
<li>需求分析<ul>
<li>主要是产品经理的工作</li>
<li>结果是输出PRD（产品需求文档），供开发者查阅</li>
</ul>
</li>
<li>概要设计<ul>
<li>基本处理流程</li>
<li>系统的组织结构</li>
<li>模块划分</li>
<li>功能分配</li>
<li>接口设计</li>
<li>数据结构设计</li>
<li>出错处理设计</li>
</ul>
</li>
<li>详细设计<ul>
<li>主要算法</li>
<li>数据结构</li>
<li>类的层次结构及调用关系</li>
</ul>
</li>
<li>编码</li>
<li>测试</li>
<li>软件交付</li>
<li>验收</li>
<li>运行维护</li>
<li>软件维护，软件升级，报废处理<h2 id="行唐积分商城后台管理系统"><a href="#行唐积分商城后台管理系统" class="headerlink" title="行唐积分商城后台管理系统"></a>行唐积分商城后台管理系统</h2><h3 id="开发计划–功能"><a href="#开发计划–功能" class="headerlink" title="开发计划–功能"></a>开发计划–功能</h3></li>
<li>商品列表查看</li>
<li>商品批量删除</li>
<li>商品上架/下架（逻辑删除）</li>
<li>商品删除</li>
<li>分页展示商品</li>
<li>商品名称检索</li>
<li>商品新增<ul>
<li>商品图片上传</li>
<li>商品分配列表导入（导入之后的工作？）</li>
<li>商品详情也页面编辑</li>
<li>新增加的商品是待上架的状态</li>
<li>新增商品后</li>
</ul>
</li>
<li>商品修改<ul>
<li>根据是否包含商品id进行判断，是否需要从后台读取</li>
<li>或新建一个新的页面专门进行数据修改的页面</li>
</ul>
</li>
<li>商品查看<ul>
<li>商品图片内容</li>
<li>商品描述详情（可能是个页面）</li>
<li>网点分配数量</li>
<li>控制按钮（上架商品或下架商品  那么删除商品呢？）</li>
<li>商品查看，提供商品二维码下载。</li>
</ul>
</li>
<li>商品库存数量审核<h3 id="使用js生成二维码并保存到本地"><a href="#使用js生成二维码并保存到本地" class="headerlink" title="使用js生成二维码并保存到本地"></a>使用js生成二维码并保存到本地</h3></li>
</ol>
<blockquote>
   <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script>
   <script src="https://cdn.bootcss.com/jquery.qrcode/1.0/jquery.qrcode.min.js"></script>
   <div id="code"></div> 
    <script>
    $("#code").qrcode({ 
        render: "table", //table方式 
        width: 200, //宽度 
        height:200, //高度 
        text: "www.helloweba.com" //任意内容 
    });
    </script>

<p>使用QRcode生成二维码，需要引入两个包。<br>生成后</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000004988831" target="_blank" rel="external">将canvas标签中的内容编程img标签，显示到我页面上</a>  </p>
<p><a href="https://www.baidufe.com/item/65c055482d26ec59e27e.html" target="_blank" rel="external">将canvas中的内容变成img，并强制浏览器进行下载</a></p>
<p><a href="http://www.eclipse.org/webtools/" target="_blank" rel="external">web-tool-platform官方地址</a>  </p>
<p><a href="http://blog.csdn.net/jbgtwang/article/details/44077853" target="_blank" rel="external">不安装WTP全包怎么添加Tomcat8到Eclipse Kepler中</a></p>
<h3 id="项目请求地址记录"><a href="#项目请求地址记录" class="headerlink" title="项目请求地址记录"></a>项目请求地址记录</h3><ol>
<li>商品管理 <ul>
<li>商品列表 productList</li>
<li>添加商品 productAdd</li>
<li>查看商品 productDetail</li>
<li>库存审核 repertoryCheck</li>
</ul>
</li>
<li>积分查询intergral?page=intergralQuery</li>
<li>发布管理publishManager?page=list</li>
<li>managerSetting?page=index</li>
</ol>
<h2 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h2><ol>
<li>项目部署时的问题，ide不支持tomcat8，试图添加ide对tomcat8的支持。  未成功</li>
<li>添加菜单后，刷新后立即删除。原因是后台使用了ehcahe的缓存机制<ul>
<li>解决：去掉后台中使用的缓存机制</li>
</ul>
</li>
<li>添加菜单后，在管理员界面上不现实刚添加的菜单<ul>
<li>原因是未授权，需要在角色菜单栏中为角色添加授权</li>
</ul>
</li>
<li>生成产品的实体类，使用基础开发平台进行开发时出现问题，平台上的代码出现小问题。<ul>
<li>在配置文件加载前设置了属性值</li>
<li>修改，将读取配置文件的静态代码块提前</li>
</ul>
</li>
<li>oracle数据库中的特殊类型，使用“select * from table”的方式查询，得到的基础平台框架自动包装clog类型，在前台中解析为一个json对象类型。<ul>
<li>解决办法：使用sql语句解决<a href="http://blog.csdn.net/wumingqian_137229/article/details/48438959" target="_blank" rel="external">dbms_lob.substr(clob字段，4000,1)</a></li>
<li>或者使用java代码进行解决。</li>
<li>最好的解决办法是使用java，框架配置解决。（复用）</li>
</ul>
</li>
<li>商品状态formatter方法，添加一个js数组，根据status进行修改。</li>
</ol>
<pre><code>var status = [&quot;删除&quot;,&quot;上架&quot;,&quot;待上架&quot;,&quot;下架&quot;];  
return status[value]; 
</code></pre><ol>
<li>查看商品列表时，如果能将一整行的数据传过来，直接更新数据就行了。不用理会它是什么状态。</li>
<li>直接操作数字比操作字符方便</li>
<li>批量删除商品时，点击按钮时触发事件。需要使用闭包的特性进行处理。<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3></li>
<li>状态为删除的时候怎么处理？</li>
<li>文件别名的作用<h3 id="ibtatis-和hibernate的实体类扫描注解不同"><a href="#ibtatis-和hibernate的实体类扫描注解不同" class="headerlink" title="ibtatis 和hibernate的实体类扫描注解不同"></a>ibtatis 和hibernate的实体类扫描注解不同</h3><h3 id="kindeditor-和-easyui的冲突问题，在新建tab的时候"><a href="#kindeditor-和-easyui的冲突问题，在新建tab的时候" class="headerlink" title="kindeditor 和 easyui的冲突问题，在新建tab的时候"></a>kindeditor 和 easyui的冲突问题，在新建tab的时候</h3><h3 id="多文件上传，-file中有一个multiple属性可以满足需求"><a href="#多文件上传，-file中有一个multiple属性可以满足需求" class="headerlink" title="多文件上传， file中有一个multiple属性可以满足需求"></a>多文件上传， file中有一个multiple属性可以满足需求</h3><h3 id="原生js中有一个fileReader对象可以实现在上传之前的图片预览"><a href="#原生js中有一个fileReader对象可以实现在上传之前的图片预览" class="headerlink" title="原生js中有一个fileReader对象可以实现在上传之前的图片预览"></a>原生js中有一个fileReader对象可以实现在上传之前的图片预览</h3></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客第一弹：歌曲分享]]></title>
      <url>/2017/08/06/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h3><p>这里是我平时喜欢听的一歌曲，分享给大家听。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=27890306&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=27646786&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=478725543&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%height=86" src="//music.163.com/outchain/player?type=2&id=165237&auto=0&height=66"></iframe><br><a id="more"></a><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%height=86" src="//music.163.com/outchain/player?type=2&id=26562739&auto=0&height=66"></iframe>
]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
