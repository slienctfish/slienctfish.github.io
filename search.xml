<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[有用的商学课]]></title>
      <url>/2017/12/26/MBA1/</url>
      <content type="html"><![CDATA[<h2 id="1-1：机会成本"><a href="#1-1：机会成本" class="headerlink" title="1.1：机会成本"></a>1.1：机会成本</h2><h3 id="概念小故事"><a href="#概念小故事" class="headerlink" title="概念小故事"></a>概念小故事</h3><ul>
<li>鱼与熊掌不可兼得，放弃的鱼就是选择熊掌的代价</li>
<li>为了得到某一样东西，通常就需要放弃一些东西，那么我们放弃的东西就是我们的<strong>机会成本</strong><h3 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>所有：所有的选择都有机会成本，没有例外。世上没有真正的免费午餐。</li>
<li>最大：机会成本是当前选择最大的代价。</li>
<li>必然：备选项必须是必然可选的，也就是在你的能力范围以内的。<h2 id="1-2：比较优势"><a href="#1-2：比较优势" class="headerlink" title="1.2：比较优势"></a>1.2：比较优势</h2><h3 id="概念小故事-1"><a href="#概念小故事-1" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li>我做的好，就应该我来做吗？事情应该交给机会成本更低的人。</li>
<li>有用更低的机会成本去产出一份成果的能力，在相比较下就具有了<strong>比较优势</strong>。<h3 id="三要素-1"><a href="#三要素-1" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>在不具备比较优势的方面主动出让。苹果公司将装配手机的过程交给比较优势更高的富士康。自己去做研究的事情。</li>
<li>在具备比较优势的方面，主动进入。大公司的机会成本更高，所以他们也一定有比较优势低的地方。</li>
<li>不断降低自己的比较优势。比较优势低说明机会成本高，不断提高自己的能力，降低在琐事上的比较优势。<h2 id="1-3：沉没成本"><a href="#1-3：沉没成本" class="headerlink" title="1.3：沉没成本"></a>1.3：沉没成本</h2><h3 id="概念小故事-2"><a href="#概念小故事-2" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li>既然“来都来了”，所以“将错就错”</li>
<li>人并不总是理性的，在做决策的时候。往往会被已经发生在过去的成本所影响。已经发生的且无可收回的成本叫做<strong>沉没成本</strong>。</li>
<li>做决策时，不要考虑沉默成本<h3 id="三要素-2"><a href="#三要素-2" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>敢于半途而废，在确定错误的方向上懂得放弃，比坚持更可贵。</li>
<li>让人欲罢不能，故意制造顾客的沉没成本。例如会员制度，交会费成为会员，成为顾客的沉没陈本。</li>
<li>创造覆水难收，要翻过一面墙，先把帽子扔过去。婚礼就是婚姻的沉没陈本。因为婚礼办都办了好好珍惜吧。<h2 id="1-4：边际成本"><a href="#1-4：边际成本" class="headerlink" title="1.4：边际成本"></a>1.4：边际成本</h2><h3 id="概念小故事-3"><a href="#概念小故事-3" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li>一架飞机上已经坐了80个人，此时如果再增加一个乘客航空公司增加的成本很低。但是飞机在增加第一位乘客的时候，航空公司增加的成本就是整个航班的成本。</li>
<li>所以：飞机起飞前的座位，理论上可以只卖一块钱。</li>
<li>额外生产一个商品所需要付出的成本。在经济学上就叫做<strong>边际成本</strong><h3 id="三要素-3"><a href="#三要素-3" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>规模经济能够降低边际成本，例子：格兰仕的成功。规模提升就降低售价，淘汰价格平衡点以下的品牌淘汰。</li>
<li>互联网经济，边际成本趋零，亚马逊这样的电商平台在增加一本书的时候几乎不会增加成本。</li>
<li>零边际成本社会，协同共享。未来社会使用权将胜过所有权，可持续性将取代消费权益，合作会压倒竞争。交换价值被共享价值取代。<h2 id="2-1-供需定理"><a href="#2-1-供需定理" class="headerlink" title="2.1: 供需定理"></a>2.1: 供需定理</h2><h3 id="概念小故事-4"><a href="#概念小故事-4" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li>价格的供需决定论：产品有价不是因为制造产品有成本，而是因为市场上对产品有需求。</li>
<li>供不应求，价格上涨；供过于求，价格下跌。<h3 id="三要素-4"><a href="#三要素-4" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>抓准真实的需求，除了你之外还有谁对你的产品感兴趣。</li>
<li>摸清竞争环境，不仅要确定是否有需求还要清楚竞争。思考自己的核心竞争力在哪儿。</li>
<li>垄断更高利润，当有了垄断地位时，可以压低产出。营造稀缺感即饥饿营销。<h2 id="2-2：需求弹性"><a href="#2-2：需求弹性" class="headerlink" title="2.2：需求弹性"></a>2.2：需求弹性</h2><h3 id="概念小故事-5"><a href="#概念小故事-5" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li><strong>需求价格弹性</strong>：某种商品的需求量，对其价格变化所做出的反应程度。</li>
<li>因为价格变化，需求变化大的商品，对价格敏感。</li>
<li>因为价格变化，需求变化小的商品，价格对销量影响较小。</li>
<li>弹性小的涨价，弹性大的降价。<h3 id="判断商品弹性三方法"><a href="#判断商品弹性三方法" class="headerlink" title="判断商品弹性三方法"></a>判断商品弹性三方法</h3></li>
</ul>
<ol>
<li>商品是否属于生活必须品，生活必需品都是刚性需求。需求弹性小。汽车的价格一降需求增长快。</li>
<li>商品是否存在可替代性。北京到上海的飞机票和背景到澳洲的飞机票可替代性就不一样。</li>
<li>看消费者调整需求的时间。油价短时间的上涨可接受，长时间油价上涨有人会换电动特斯拉。<h2 id="2-3：凡勃仑商品"><a href="#2-3：凡勃仑商品" class="headerlink" title="2.3：凡勃仑商品"></a>2.3：凡勃仑商品</h2><h3 id="概念小故事-6"><a href="#概念小故事-6" class="headerlink" title="概念小故事"></a>概念小故事</h3></li>
</ol>
<ul>
<li>很多时候在购买商品的时候，不只看使用价值。还看商品能够带来的身份感觉。</li>
<li>商品存在两种价值，一种是功能价值，一种是炫耀价值。<h3 id="三要素-5"><a href="#三要素-5" class="headerlink" title="三要素"></a>三要素</h3></li>
</ul>
<ol>
<li>给品牌造气质，劳斯莱斯车标。浪漫的爱情故事。</li>
<li>给产品加辨识，辉腾需要增加产品辨识度。透漏出车主的身份。</li>
<li>给用户贴标签，给用户贴上成功卓越的标签。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> poi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[测试帖]]></title>
      <url>/2017/10/22/test/</url>
      <content type="html"><![CDATA[<p>纯属测试</p>
]]></content>
      
        
        <tags>
            
            <tag> mytest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[春风十里不如你]]></title>
      <url>/2017/08/27/dairy/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=473571905&auto=0&height=66"></iframe>

<h3 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h3><blockquote>
<ul>
<li>我如果爱你——</li>
<li>绝不像攀援的凌霄花，</li>
<li>借你的高枝炫耀自己：</li>
<li>我如果爱你——</li>
<li>绝不学痴情的鸟儿，</li>
<li>为绿荫重复单调的歌曲；</li>
<li>也不止像泉源，</li>
<li>常年送来清凉的慰籍；</li>
<li>也不止像险峰，增加你的高度，衬托你的威仪。</li>
<li>甚至日光。</li>
<li>甚至春雨。</li>
<li>不，这些都还不够！</li>
<li>我必须是你近旁的一株木棉，</li>
<li>做为树的形象和你站在一起。<a id="more"></a></li>
<li>根，紧握在地下，</li>
<li>叶，相触在云里。</li>
<li>每一阵风过，</li>
<li>我们都互相致意，</li>
<li>但没有人</li>
<li>听懂我们的言语。</li>
<li>你有你的铜枝铁干，</li>
<li>像刀，像剑，</li>
<li>也像戟，</li>
<li>我有我的红硕花朵，</li>
<li>像沉重的叹息，</li>
<li>又像英勇的火炬，</li>
<li>我们分担寒潮、风雷、霹雳；</li>
<li>我们共享雾霭流岚、虹霓，</li>
<li>仿佛永远分离，</li>
<li>却又终身相依，</li>
<li>这才是伟大的爱情，</li>
<li>坚贞就在这里：</li>
<li>不仅爱你伟岸的身躯，</li>
<li>也爱你坚持的位置，脚下的土地。</li>
</ul>
<h3 id="小体会"><a href="#小体会" class="headerlink" title="小体会"></a>小体会</h3><ol>
<li>剧中有欢乐有悲伤，生活中的各种滋味都在剧中体现。而笔者印象最深刻的就是厚朴班长的“同学情谊深似海”，没有什么情感能够比得上一起奋斗的战友之间的感情更坚固了。因为他们曾经为了共同的一个目标而努力，他们曾有共同的信仰。</li>
<li>剧中的男主人公和三个演员有了不同的感情经历。小红是一种具有自由、天真率性的品格，而赵英男是虽然渴望浪漫但是还是要将生活放到首位的一种人，最后的柳青是兼具两种品格。</li>
<li>如果将秋水想象成一个人，那么小红将是在他内心深处最渴望的某些事物。而赵英男就是迫于生活而需要去接受的一些事物。</li>
<li>我相信在每个人内心深处所深爱的都会是小红，但是由于生活的压迫又不得不去接受英男的追求。</li>
</ol>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/js_code/</url>
      <content type="html"><![CDATA[<p>##js使用代码小片段</p>
<h3 id="将表单内容序列化成一个json片段（需要依赖jQ）"><a href="#将表单内容序列化成一个json片段（需要依赖jQ）" class="headerlink" title="将表单内容序列化成一个json片段（需要依赖jQ）"></a>将表单内容序列化成一个json片段（需要依赖jQ）</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$.fn.serializeJson=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">           <span class="keyword">var</span> serializeObj=&#123;&#125;;  </div><div class="line">           <span class="keyword">var</span> array=<span class="keyword">this</span>.serializeArray();  </div><div class="line">           <span class="keyword">var</span> str=<span class="keyword">this</span>.serialize();  </div><div class="line">           $(array).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">               <span class="keyword">if</span>(serializeObj[<span class="keyword">this</span>.name])&#123;  </div><div class="line">                   <span class="keyword">if</span>($.isArray(serializeObj[<span class="keyword">this</span>.name]))&#123;  </div><div class="line">                       serializeObj[<span class="keyword">this</span>.name].push(<span class="keyword">this</span>.value);  </div><div class="line">                   &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                       serializeObj[<span class="keyword">this</span>.name]=[serializeObj[<span class="keyword">this</span>.name],<span class="keyword">this</span>.value];  </div><div class="line">                   &#125;  </div><div class="line">               &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                   serializeObj[<span class="keyword">this</span>.name]=<span class="keyword">this</span>.value;   </div><div class="line">               &#125;  </div><div class="line">           &#125;);  </div><div class="line">           <span class="keyword">return</span> serializeObj;  </div><div class="line">       &#125;;</div></pre></td></tr></table></figure>
</code></pre><h3 id="跨域请求原理（需要依赖jQ）"><a href="#跨域请求原理（需要依赖jQ）" class="headerlink" title="跨域请求原理（需要依赖jQ）"></a>跨域请求原理（需要依赖jQ）</h3><ol>
<li>跨域问题简述：<ul>
<li>这里说的js跨域是指通过js在不同的域之间进行数据传输或通信，比如用ajax向一个不同的域请求数据，或者通过js获取页面中不同域的框架中(iframe)的数据。只要协议、域名、端口有任何一个不同，都被当作是不同的域。</li>
</ul>
</li>
<li><p>跨域问题的解决方法：</p>
<ul>
<li>使用jQuery发起ajax请求,在路径后加上callback参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">"utl=?callback=?"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">	code...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>原理分析</p>
<ul>
<li>浏览器将ajax请求中的匿名函数,起名<code>&lt;script src = &quot;url?callback=JQuery12345&quot;&gt;</code></li>
<li>将请求发送给服务器，并得到返回的结果</li>
<li>调用匿名函数执行函数中的代码<a id="more"></a>
<h3 id="仿百度分页效果js代码（需要依赖jQ）"><a href="#仿百度分页效果js代码（需要依赖jQ）" class="headerlink" title="仿百度分页效果js代码（需要依赖jQ）"></a>仿百度分页效果js代码（需要依赖jQ）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>BootStrap+AngularJS分页显示 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../css/bootstrap/bootstrap.css"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"paginationApp"</span> <span class="attr">ng-controller</span>=<span class="string">"paginationCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination pull-middle"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">ng-click</span>=<span class="string">"prev()"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"page in pageList"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active: isActivePage(page)&#125;"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">" selectPage(page) "</span>&gt;</span>&#123;&#123;page&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">ng-click</span>=<span class="string">"next() "</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript "</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">		<span class="keyword">var</span> paginationApp = angular.module(<span class="string">"paginationApp"</span>, []);</span></div><div class="line"><span class="javascript">		paginationApp.controller(<span class="string">"paginationCtrl"</span>, [<span class="string">"$scope"</span>, <span class="string">"$http"</span>, </span></div><div class="line"><span class="javascript">			<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">			<span class="comment">// 全局属性 </span></span></div><div class="line"><span class="javascript">			$scope.currentPage = <span class="number">1</span>; <span class="comment">//当前页码 </span></span></div><div class="line"><span class="javascript">			$scope.pageSize = <span class="number">4</span>; <span class="comment">// 每页多少条</span></span></div><div class="line"><span class="javascript">			$scope.totalCount = <span class="number">0</span>; <span class="comment">// 总记录数 </span></span></div><div class="line"><span class="javascript">			$scope.totalPages = <span class="number">0</span>; <span class="comment">// 总页数，根据总记录数和每页多少条进行计算 </span></span></div><div class="line"><span class="javascript">			<span class="comment">//链接到上一页</span></span></div><div class="line"><span class="javascript">			$scope.prev = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>($scope.currentPage &gt; <span class="number">1</span>) &#123;</span></div><div class="line"><span class="undefined">					$scope.selectPage($scope.currentPage - 1);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;;</span></div><div class="line"><span class="javascript">			<span class="comment">//链接到下一页</span></span></div><div class="line"><span class="javascript">			$scope.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>($scope.currentPage &lt; $scope.totalPages) &#123;</span></div><div class="line"><span class="undefined">					$scope.selectPage($scope.currentPage + 1);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">			&#125;;</span></div><div class="line"><span class="javascript">			$scope.selectPage = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span></div><div class="line"><span class="undefined">				$http(&#123;</span></div><div class="line"><span class="javascript">					method: <span class="string">'GET'</span>,</span></div><div class="line"><span class="javascript">					url: <span class="string">''</span>,</span></div><div class="line"><span class="undefined">					params: &#123;</span></div><div class="line"><span class="undefined">						page: page,</span></div><div class="line"><span class="undefined">						pageSize: $scope.pageSize</span></div><div class="line"><span class="undefined">					&#125;</span></div><div class="line"><span class="javascript">				&#125;).success(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, headers, config</span>) </span>&#123;</span></div><div class="line"><span class="javascript">					<span class="comment">// 计算总页数</span></span></div><div class="line"><span class="undefined">					$scope.totalPages = 13;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">				<span class="keyword">var</span> begin ;</span></div><div class="line"><span class="javascript">				<span class="keyword">var</span> end; </span></div><div class="line"><span class="undefined">				begin = page - 5;</span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>(begin &lt;= <span class="number">0</span>)&#123;</span></div><div class="line"><span class="undefined">					begin = 1;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">				end = begin + 9 ;</span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>(end &gt; $scope.totalPages)&#123;</span></div><div class="line"><span class="undefined">					end = $scope.totalPages;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">				begin = end - 9;</span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>(begin &lt; <span class="number">1</span>)&#123;</span></div><div class="line"><span class="undefined">					begin = 1;</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="javascript">				$scope.pageList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></div><div class="line"><span class="javascript">				<span class="keyword">for</span>(<span class="keyword">var</span> i= begin;i &lt;= end; i ++)&#123;</span></div><div class="line"><span class="undefined">					$scope.pageList.push(i);</span></div><div class="line"><span class="undefined">				&#125;</span></div><div class="line"><span class="undefined">				&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">				<span class="comment">// 不能小于1大于最大</span></span></div><div class="line"><span class="javascript">				<span class="keyword">if</span>(page &lt; <span class="number">1</span> || page &gt; $scope.totalPages) <span class="keyword">return</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">				$scope.currentPage = page;</span></div><div class="line"><span class="undefined">				$scope.isActivePage(page);</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">			$scope.isActivePage = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span></div><div class="line"><span class="javascript">				<span class="keyword">return</span> page == $scope.currentPage;</span></div><div class="line"><span class="undefined">			&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">			$scope.selectPage($scope.currentPage);</span></div><div class="line"><span class="undefined">		&#125;]);</span></div><div class="line"><span class="undefined">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="在线html编辑器（kindeditor）"><a href="#在线html编辑器（kindeditor）" class="headerlink" title="在线html编辑器（kindeditor）"></a>在线html编辑器（kindeditor）</h2><ol>
<li><p>在使用kindeditor的页面上导入</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--导入在线HTML编辑器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../editor/kindeditor.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../../editor/lang/zh_CN.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../../editor/themes/default/default.css"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>应用kindeditor,页面需要提供的元素</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"description"</span> </span></div><div class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">"description"</span> <span class="attr">style</span>=<span class="string">"width:80%"</span> <span class="attr">rows</span>=<span class="string">"20"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>js 代码:</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">KindEditor.ready(<span class="function"><span class="keyword">function</span>(<span class="params">K</span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.editor = K.create(<span class="string">'#description'</span>,&#123;</div><div class="line">		<span class="comment">//开启图片空间管理</span></div><div class="line">    	allowFileManager:<span class="literal">true</span>,</div><div class="line">		<span class="comment">//文件上传处理的请求路径</span></div><div class="line">		uploadJson : <span class="string">'../../image_upload.action'</span>,</div><div class="line">		<span class="comment">//管理图片的服务器请求路径</span></div><div class="line">   		fileManagerJson : <span class="string">'../../image_manage.action'</span></div><div class="line">    &#125;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/quartz/</url>
      <content type="html"><![CDATA[<h2 id="quartz任务调度框架"><a href="#quartz任务调度框架" class="headerlink" title="quartz任务调度框架"></a>quartz任务调度框架</h2><ol>
<li><p>在maven项目的pom文件中引入依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;quartz&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.2.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.2.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>quartz中的基本元素： </p>
</li>
</ol>
<ul>
<li><p>job 工作任务，你要做什么</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"hello,quartz !!!...."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>trigger执行工作任务 触发条件，什么时间执行，多久执行一次</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置任务立即开始并且隔5秒钟执行一次</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</div><div class="line">	<span class="comment">// 定时器对象</span></div><div class="line">	Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</div><div class="line"></div><div class="line">	<span class="comment">// 定义一个工作对象</span></div><div class="line">	JobDetail job = JobBuilder.newJob(HelloJob.class)</div><div class="line">			.withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>).build();</div><div class="line">	<span class="comment">// 定义触发器</span></div><div class="line">	Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">			.withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>).startNow()</div><div class="line">			.withSchedule(SimpleScheduleBuilder.repeatSecondlyForever(<span class="number">5</span>))</div><div class="line">			.build();</div><div class="line">	scheduler.scheduleJob(job,trigger);</div><div class="line">	<span class="comment">// 开启定时器</span></div><div class="line">	scheduler.start();</div><div class="line">	<span class="comment">// 关闭定时器</span></div><div class="line">	scheduler.shutdown();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>trigger执行工作任务 触发条件，什么时间执行，多久执行一次(每天的特定时间执行)</p>
<a id="more"></a>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</div><div class="line">	<span class="comment">// 定时器对象</span></div><div class="line">	Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</div><div class="line"></div><div class="line">	<span class="comment">// 定义一个工作对象</span></div><div class="line">	JobDetail job = JobBuilder.newJob(HelloJob.class)</div><div class="line">			.withIdentity(<span class="string">"job1"</span>, <span class="string">"group1"</span>).build();</div><div class="line">	<span class="comment">// 定义触发器</span></div><div class="line">	Trigger trigger = TriggerBuilder.newTrigger()</div><div class="line">			.withIdentity(<span class="string">"trigger1"</span>, <span class="string">"group1"</span>)</div><div class="line">			.withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">"0 0 0 ? * * *"</span>))</div><div class="line">			.build();</div><div class="line">	</div><div class="line">	scheduler.scheduleJob(job,trigger);</div><div class="line">	</div><div class="line">	<span class="comment">// 开启定时器</span></div><div class="line">	scheduler.start();</div><div class="line">	<span class="comment">// 关闭定时器</span></div><div class="line">	<span class="comment">//	scheduler.shutdown();</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><h3 id="cronTrigger的使用，cron表达式：（-）"><a href="#cronTrigger的使用，cron表达式：（-）" class="headerlink" title="cronTrigger的使用，cron表达式：（      ）"></a>cronTrigger的使用，cron表达式：（<em> </em> <em> </em> <em> </em> ）</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. second 秒</div><div class="line">2. minutes 分钟</div><div class="line">3. hours 小时</div><div class="line">4. day-of-month 月中的天</div><div class="line">5. month yue</div><div class="line">6. day-of-week 周中的天</div><div class="line">7. year（optional field） 年 （可选的域）</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="quartz和spring集成使用"><a href="#quartz和spring集成使用" class="headerlink" title="quartz和spring集成使用"></a>quartz和spring集成使用</h3><ol>
<li><p>在spring的maven项目中引入 依赖</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line"> 		&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line"> 		&lt;artifactId&gt;quartz&lt;/artifactId&gt;</div><div class="line"> 		&lt;version&gt;2.2.1&lt;/version&gt;</div><div class="line"> 	&lt;/dependency&gt;</div><div class="line"></div><div class="line"> 	&lt;dependency&gt;</div><div class="line"> 		&lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line"> 		&lt;artifactId&gt;quartz-jobs&lt;/artifactId&gt;</div><div class="line"> 		&lt;version&gt;2.2.1&lt;/version&gt;</div><div class="line"> 	&lt;/dependency&gt;</div><div class="line">&lt;!--spring对其他框架的支持--&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">&lt;!--spring 的web开发包--&gt;</div><div class="line"> 	&lt;dependency&gt;</div><div class="line"> 		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line"> 		&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line"> 		&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</div><div class="line"> 	&lt;/dependency&gt;</div><div class="line">&lt;!--spring中事务管理的包--&gt;</div><div class="line"> 	&lt;dependency&gt;</div><div class="line"> 		&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line"> 		&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</div><div class="line"> 		&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;</div><div class="line"> 	&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置web.xml 文件 spring的监听器</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- spring 配置文件位置 --&gt;</div><div class="line">&lt;context-param&gt;</div><div class="line">	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div><div class="line">&lt;!-- spring核心监听 --&gt;</div><div class="line">&lt;listener&gt;</div><div class="line">	&lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></div><div class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>编写job程序</p>
</li>
<li><p>配置spring的applicationContext.xml</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"cn.itcast"</span> /&gt;</div><div class="line">&lt;!--定义工作的bean--&gt;</div><div class="line">&lt;bean id=<span class="string">"helloJob"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.JobDetailFactoryBean"</span>&gt;  </div><div class="line">  		&lt;property name=<span class="string">"jobClass"</span> value=<span class="string">"cn.itcast.HelloJob"</span>/&gt;  </div><div class="line">&lt;/bean&gt; </div><div class="line">&lt;!-- ======================== 调度触发器 ======================== --&gt;</div><div class="line">&lt;bean id=<span class="string">"simpleTriggerBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"</span>&gt;</div><div class="line">	&lt;property name=<span class="string">"jobDetail"</span> ref=<span class="string">"helloJob"</span>/&gt;</div><div class="line">	&lt;property name=<span class="string">"startDelay"</span> value=<span class="string">"3000"</span>/&gt;</div><div class="line">	&lt;property name=<span class="string">"repeatInterval"</span> value=<span class="string">"5000"</span>/&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line">&lt;!-- ======================== 调度工厂 ======================== --&gt;</div><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</div><div class="line">	&lt;property name=<span class="string">"jobFactory"</span> ref=<span class="string">"jobFactory"</span>/&gt;</div><div class="line">	&lt;property name=<span class="string">"triggers"</span>&gt;</div><div class="line">		&lt;list&gt;</div><div class="line">			&lt;ref bean=<span class="string">"simpleTriggerBean"</span> /&gt;</div><div class="line">		&lt;/list&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>解决quartz和spring集成后bean注入的问题</p>
</li>
<li>问题描述：<ul>
<li>spring和quartz集成后，无法在job中注入写好的service bean</li>
</ul>
</li>
<li><p>解决办法–在Scheduler中自定义一个jobfactory</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"jobFactory"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobFactory</span> <span class="keyword">extends</span> <span class="title">AdaptableJobFactory</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> AutowireCapableBeanFactory capableBeanFactory;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// 调用父类的方法</span></div><div class="line">		Object jobInstance = <span class="keyword">super</span>.createJobInstance(bundle);</div><div class="line">		<span class="comment">// 进行注入</span></div><div class="line">		capableBeanFactory.autowireBean(jobInstance);</div><div class="line">		<span class="keyword">return</span> jobInstance;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件applicationContext.xml</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</div><div class="line">	&lt;!--在此引入jobfactory--&gt;</div><div class="line">	&lt;property name=<span class="string">"jobFactory"</span> ref=<span class="string">"jobFactory"</span>/&gt;</div><div class="line">	&lt;property name=<span class="string">"triggers"</span>&gt;</div><div class="line">		&lt;list&gt;</div><div class="line">			&lt;ref bean=<span class="string">"simpleTriggerBean"</span> /&gt;</div><div class="line">		&lt;/list&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> quartz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/reids/</url>
      <content type="html"><![CDATA[<h2 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h2><h3 id="String字符串类型（存变量）"><a href="#String字符串类型（存变量）" class="headerlink" title="String字符串类型（存变量）"></a>String字符串类型（存变量）</h3><ol>
<li>set key value 【赋值】</li>
<li>get key    【取值】</li>
<li>getset key value    【取值并赋值】</li>
<li>del key 【删除】</li>
<li>incr key 【整数数据增加1】</li>
<li>incrby key increment    【整数数据安步长增加】</li>
<li>decr key 【整数数据减少1】</li>
<li>decrby key decrement    【整数数据安步长减少】</li>
<li>append key value 【向尾部追加值】</li>
<li>setlen key 【获取字符串长度】</li>
<li>mset key1 value1 key2 value2 【同时设置多个键值】</li>
<li>mget key1 key2 key3    【同时获取多个值】<h3 id="Hash类型（存对象）"><a href="#Hash类型（存对象）" class="headerlink" title="Hash类型（存对象）"></a>Hash类型（存对象）</h3></li>
<li>hset key field value 【赋值】</li>
<li>hmset key field value [field value…] 【多字段赋值】</li>
<li>hget key field 【取值】</li>
<li>hmget key field1 field2 【多字段取值】</li>
<li>hgetall key 【获取所有字段值】<a id="more"></a></li>
<li>hdel key field [field …]【删除字段，可以同时删除多个字段】</li>
<li>hincrby key field increment【增加数字】</li>
<li>hexists key field 【判断字段是否存在–返回值为0或1】</li>
<li>hkeys key 【获取对象中的所有字段】</li>
<li>hvals key    【获取对象中所有字段的值】</li>
<li>hlen key 【获取字段数量】<h3 id="List列表类型"><a href="#List列表类型" class="headerlink" title="List列表类型"></a>List列表类型</h3></li>
<li>lpush key value [value2 value3…]【向列表左边增加元素】</li>
<li>rpush key value [value2 value3…]【向列表右边增加元素】</li>
<li>lrange key start stop 【查看列表】</li>
<li>lpop key 【从列表左侧弹出元素】</li>
<li>rpop key 【从列表右侧弹出元素】</li>
<li>llen key 【获取列表中元素个数】</li>
<li>lrem key count value    【删除列表中指定的值】<ul>
<li>当count&gt;0时， LREM会从列表左边开始删除。 </li>
<li>当count&lt;0时， LREM会从列表后边开始删除。 </li>
<li>当count=0时， LREM删除所有值为value的元素。</li>
</ul>
</li>
<li>lindex key index 【获得指定索引的元素值】</li>
<li>lset key index value 【设置指定索引的元素值】</li>
<li>ltrim key start stop 【只保留列表指定片段，从左边算】</li>
<li><p>LINSERT key BEFORE|AFTER pivot value</p>
<blockquote>
<p>该命令首先会在列表中从左到右查找值为pivot的元素，然后根据第二个参数是BEFORE还是AFTER来决定将value插入到该元素的前面还是后面。</p>
</blockquote>
</li>
<li><p>RPOPLPUSH source destination【将元素从一个列表转移到另一个列表中】</p>
<h3 id="Set集合类型（不重复没有顺序）"><a href="#Set集合类型（不重复没有顺序）" class="headerlink" title="Set集合类型（不重复没有顺序）"></a>Set集合类型（不重复没有顺序）</h3></li>
<li>SADD key member [member …]    【增加元素】</li>
<li>srem key member [member …]    【删除元素】</li>
<li>smembers key 【获得集合中的所有元素】</li>
<li>sismember key member 【判断元素是否在集合中】</li>
<li>SDIFF key [key …]    【求集合补集，前面有后面没有的】</li>
<li>SINTER key [key …]    【求集合交集】</li>
<li>SUNION key [key …]    【求集合并集】</li>
<li>SCARD key    【获取集合中元素个数】</li>
<li><p>spop key 【随机弹出一个元素】</p>
<h3 id="sortedSet类型–Zset（排序的集合）"><a href="#sortedSet类型–Zset（排序的集合）" class="headerlink" title="sortedSet类型–Zset（排序的集合）"></a>sortedSet类型–Zset（排序的集合）</h3><blockquote>
<p>在集合类型的基础上，有序集合类型为集合中的每个元素都关联一个分数，这使得我们不仅可以完成插入、删除和判断元素是否存在在集合中，还能够获得分数最高或最低的前N个元素、获取指定分数范围内的元素等与分数有关的操作。</p>
</blockquote>
</li>
<li><p>ZADD key score member [score member …]    【增加元素】</p>
</li>
<li>ZRANGE key start stop [WITHSCORES]    【元素从小到大排名】</li>
<li>ZREVRANGE key start stop [WITHSCORES]【元素从大到小排名】</li>
<li>ZSCORE key member 【获得指定元素分数】</li>
<li>ZREM key member [member …] 【删除元素】</li>
<li>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]    【获得指定分数范围的元素】</li>
<li>ZINCRBY  key increment member 【增加某个元素的分数】</li>
<li>ZCARD key    【获得集合中元素数量】</li>
<li>ZCOUNT key min max 【获得指定分数范围内的元素个数】</li>
<li>ZREMRANGEBYRANK key start stop 【按照排名范围删除元素】</li>
<li>ZREMRANGEBYSCORE key min max    【按照分数范围删除元素】</li>
<li>ZRANK key member 【    获取元素的排名】<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>EXPIRE key seconds             设置key的生存时间（单位：秒）key在多少秒后会自动删除</li>
</ul>
</li>
</ol>
<ul>
<li>TTL key                     查看key生于的生存时间</li>
<li>PERSIST key                清除生存时间 </li>
<li>PEXPIRE key milliseconds    生存时间设置单位为：毫秒</li>
<li>rename oldkey newkey    重命名key</li>
<li>type key 返回值的类型</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/dubbo/</url>
      <content type="html"><![CDATA[<h1 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h1><ol>
<li>•Provider: 暴露服务的服务提供方。</li>
<li>•Consumer: 调用远程服务的服务消费方。</li>
<li>•Registry: 服务注册与发现的注册中心。</li>
<li>•Monitor: 统计服务的调用次调和调用时间的监控中心。</li>
<li>•Container: 服务运行容器。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 使用dubbo发布服务 --&gt;</div><div class="line">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</div><div class="line">&lt;dubbo:application name=<span class="string">"taotao-manager"</span> /&gt;</div><div class="line">&lt;dubbo:registry protocol=<span class="string">"zookeeper"</span></div><div class="line">	address=<span class="string">"192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183"</span> /&gt;</div><div class="line">&lt;!-- 用dubbo协议在<span class="number">20880</span>端口暴露服务 --&gt;</div><div class="line">&lt;dubbo:protocol name=<span class="string">"dubbo"</span> port=<span class="string">"20880"</span> /&gt;</div><div class="line">&lt;!-- 声明需要暴露的服务接口 --&gt;</div><div class="line">&lt;dubbo:service <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.taotao.service.ItemService"</span> ref=<span class="string">"itemServiceImpl"</span> /&gt;</div></pre></td></tr></table></figure>
<!-- -->
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 引用dubbo服务 --&gt;</div><div class="line">&lt;dubbo:application name=<span class="string">"taotao-manager-web"</span>/&gt;</div><div class="line">&lt;dubbo:registry protocol=<span class="string">"zookeeper"</span> address=<span class="string">"192.168.25.154:2181,</span></div><div class="line"><span class="string">192.168.25.154:2182,  192.168.25.154:2183"</span>/&gt;	</div><div class="line">&lt;dubbo:reference <span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.taotao.service.ItemService"</span> id=<span class="string">"itemService"</span> /&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/freemark/</url>
      <content type="html"><![CDATA[<h2 id="freemark-基于模板生成html页面并保存的技术-（页面静态化）"><a href="#freemark-基于模板生成html页面并保存的技术-（页面静态化）" class="headerlink" title="freemark 基于模板生成html页面并保存的技术  （页面静态化）"></a>freemark 基于模板生成html页面并保存的技术  （页面静态化）</h2><p>页面请求服务器，服务器现在本地查找是否存在静态页面资源，如果存在则直接返回。不存在则需要到数据库中查找，并生成静态页面保存到服务器端，并将结果返回给浏览器端。</p>
<ol>
<li><p>服务器端处理请求的代码</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Action</span>(value=<span class="string">"promotion_showdetail"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showdetail</span><span class="params">()</span></span></div><div class="line"><span class="function">	<span class="keyword">throws</span> TemplateNotFoundException, MalformedTemplateNameException, ParseException, IOException, TemplateException </span>&#123;</div><div class="line">System.err.println(<span class="string">"id:"</span> + model.getId());</div><div class="line">ServletActionContext.getResponse().setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">String filename = model.getId() + <span class="string">".html"</span>;</div><div class="line">File file = <span class="keyword">new</span> File(ServletActionContext.getServletContext().getRealPath(<span class="string">"html"</span>) + <span class="string">"/"</span> + filename);</div><div class="line">System.out.println(file.getAbsolutePath());</div><div class="line"><span class="comment">//判断文件是否存在</span></div><div class="line"><span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">	<span class="comment">//文件不存在</span></div><div class="line">	System.out.println(<span class="string">"基于freeMark模板生成文件："</span> + filename);</div><div class="line">	Promotion promotion = WebClient</div><div class="line">			.create(Constant.BOS_MANAGEMENT_URL + <span class="string">"/services/promotionService/promotion/"</span> + model.getId())</div><div class="line">			.accept(MediaType.APPLICATION_JSON).get(Promotion.class);</div><div class="line">	Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_22);</div><div class="line">	<span class="comment">//   /cn/itcast/bos/templates---&gt;html模板文件存在的位置</span></div><div class="line">	configuration.setClassForTemplateLoading(<span class="keyword">this</span>.getClass(), <span class="string">"/cn/itcast/bos/templates"</span>);</div><div class="line">	configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</div><div class="line">	</div><div class="line">	Template template = configuration.getTemplate(<span class="string">"promotion.ftl"</span>);</div><div class="line">	Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">	paramMap.put(<span class="string">"globalItem"</span>, promotion);</div><div class="line">	</div><div class="line">	FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">	Writer writer = <span class="keyword">new</span> OutputStreamWriter(out,<span class="string">"utf-8"</span>);</div><div class="line">	template.process(paramMap, writer);</div><div class="line">	writer.close();</div><div class="line">	System.out.println(<span class="string">"生成tml页面"</span>);</div><div class="line">	</div><div class="line">	&#125;</div><div class="line">	FileUtils.copyFile(file, ServletActionContext.getResponse().getOutputStream());</div><div class="line">	<span class="keyword">return</span> NONE;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>模板内容编写(promotion.ftl文件)  </p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/promotion_detail.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container promotions"</span> &gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-2 prolist"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/promotion"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>返回促销列表<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/pro.jpg"</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10 procontent"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>$&#123;globalItem.title&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>活动范围: $&#123;globalItem.activeScope&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>活动时间: $&#123;globalItem.startDate?string("yyyy-MM-dd HH:mm:ss")&#125; - $&#123;globalItem.endDate?string("yyyy-MM-dd HH:mm:ss")&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"partline clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"promotionbox"</span> &gt;</span></div><div class="line">			$&#123;globalItem.description&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 模板静态化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/logger/</url>
      <content type="html"><![CDATA[<h2 id="日志技术"><a href="#日志技术" class="headerlink" title="日志技术"></a>日志技术</h2><h3 id="常用日志技术"><a href="#常用日志技术" class="headerlink" title="常用日志技术"></a>常用日志技术</h3><ol>
<li>log4j (日志框架 )</li>
<li>slf4j （简单日志门面 接口 必须有实现）</li>
<li>apache commons-logging —-  JCL （日志接口 ，自带一个简单实现 ） </li>
<li>JDK java.util.logging —- JUL （JDK自带日志技术）<ul>
<li>slf4j和JCL 是接口 </li>
<li>log4j和JUL 是实现 </li>
</ul>
</li>
</ol>
<ul>
<li><p>JCL有两个基本的抽象类：Log(基本记录器)和LogFactory(负责创建Log实例)。当commons-logging.jar被加入到 CLASSPATH之后，它会心可能合理地猜测你想用的日志工具，然后进行自我设置，用户根本不需要做任何设置。默认的LogFactory是按照下列的步骤去发现并决定那个日志工具将被使用的（按照顺序，寻找过程会在找到第一个工具时中止）:</p>
<ol>
<li>寻找当前factory中名叫org.apache.commons.logging.Log配置属性的值</li>
<li>寻找系统中属性中名叫org.apache.commons.logging.Log的值</li>
<li>如果应用程序的classpath中有log4j,则使用相关的包装(wrapper)类(Log4JLogger)</li>
<li>如果应用程序运行在jdk1.4的系统中，使用相关的包装类(Jdk14Logger)</li>
<li>使用简易日志包装类(SimpleLog)<br>commons-logging + log4j <a id="more"></a></li>
</ol>
</li>
<li>slf4j 静态实现 ，必须指定实现 classpath 加入实现包<br>slf4j-api.jar 接口 + slf4j-log4j + log4j </li>
</ul>
<h3 id="编程基于接口编程"><a href="#编程基于接口编程" class="headerlink" title="编程基于接口编程"></a>编程基于接口编程</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用 JCL commons-logging 记录日志</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log LOG1 = LogFactory.getLog(JCLTest.class);</div><div class="line"><span class="comment">// 使用 JUL 记录日志</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG2 = Logger</div><div class="line">		.getLogger(JCLTest.class.getName());</div><div class="line"><span class="comment">// 使用Log4j</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.apache.log4j.Logger LOG3 = org.apache.log4j.Logger</div><div class="line">		.getLogger(JCLTest.class);</div><div class="line"><span class="comment">// 使用slf4j</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger LOG4 = LoggerFactory</div><div class="line">		.getLogger(JCLTest.class);</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>log4j 使用 （只显示更高级别的日志  开发调试级别， 上线错误级别）<ul>
<li>在classpath 加入 log4j.properties 或者 log4j.xml </li>
<li>日志级别 <ul>
<li>fatal 致命错误</li>
<li>error 普通错误</li>
<li>warn 警告信息</li>
<li>info 普通信息</li>
<li>debug 调试信息</li>
<li>trace 堆栈信息  </li>
</ul>
</li>
<li><strong>在log4j.properties 配置日志级别</strong><br>语法： 记录器 = 日志级别，输出源1，输出源2<ul>
<li>log4j.rootLogger=DEBUG, A1 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">log4j.rootLogger=DEBUG, A1</div><div class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.A1.layout.ConversionPattern= %-<span class="number">4</span>r [%t] %-<span class="number">5</span>p %c %x - %m%n</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Log4j提供的输出目的地"><a href="#Log4j提供的输出目的地" class="headerlink" title="Log4j提供的输出目的地"></a>Log4j提供的输出目的地</h4><pre><code>org.apache.log4j.ConsoleAppender(控制台) 
org.apache.log4j.FileAppender(文件) 
org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件) 
org.apache.log4j.RollingFileAppender(文件到达指定大小时产生一个新文件) 
org.apache.log4j.WriterAppender(将日志信息以流格式发送到任何地方) 
</code></pre><h4 id="Log4j提供的layout"><a href="#Log4j提供的layout" class="headerlink" title="Log4j提供的layout"></a>Log4j提供的layout</h4><pre><code>org.apache.log4j.HTMLLayout（以HTML表格形式布局）
org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）
</code></pre><h4 id="log4j使用示例代码"><a href="#log4j使用示例代码" class="headerlink" title="log4j使用示例代码"></a>log4j使用示例代码</h4><pre><code>package org.javaresearch.log4j;
import org.apache.log4j.*;

public class TestLog4J {
  static Logger log = Logger.getLogger(TestLog4J.class.getName());
   public static void main(String args[]) {
        // logging的各种方法
        log.debug(&quot;Start of main()&quot;);
   }
}
</code></pre><h4 id="日志应用于文件"><a href="#日志应用于文件" class="headerlink" title="日志应用于文件"></a>日志应用于文件</h4><pre><code>log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=file.log log4j.appender.FILE.Append=false
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=
[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
</code></pre><h4 id="将日志应用于控制台"><a href="#将日志应用于控制台" class="headerlink" title="将日志应用于控制台"></a>将日志应用于控制台</h4><pre><code>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=
[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
</code></pre><ul>
<li>jul 使用 <ul>
<li>在classpath 加入logging.properties </li>
<li>日志级别 SEVERE 、WARNING、 INFO、 CONFIG、FINE、FINER、 FINEST  </li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 日志技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/22/hadoop/</url>
      <content type="html"><![CDATA[<h2 id="hadoop入门"><a href="#hadoop入门" class="headerlink" title="hadoop入门"></a>hadoop入门</h2><ol>
<li>hadoop的两个大功能<ul>
<li>提供海量数据的<strong>存储</strong>服务</li>
<li>提供<strong>分析海量数据</strong>的编程框架及运行平台</li>
</ul>
</li>
<li>hadoop3大核心组件<ul>
<li>Hdfs——hadoop分布式文件系统海量数据的存储</li>
<li>MapReduce——分布式运算框架，海量数据运算分析（spark）</li>
<li>Yarn——资源调度管理集群<blockquote>
<p>1.可以把hadoop理解为一个编程框架（类比：structs、spring、hibernate/mybatis），有着自己特定的API封装和用户编程规范，用户可借助这些API来实现数据处理逻辑；<br>2.从另一个角度，hadoop又可以理解为一个提供服务的软件（类比：数据库服务oracle/mysql、索引服务solr，缓存服务redis等），用户程序通过客户端向hadoop集群请求服务来实现特定的功能；</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="hdfs的优缺点"><a href="#hdfs的优缺点" class="headerlink" title="hdfs的优缺点"></a>hdfs的优缺点</h2><h3 id="1-hdfs的优点"><a href="#1-hdfs的优点" class="headerlink" title="1.hdfs的优点"></a>1.hdfs的优点</h3><ol>
<li>高容错性————数据自动保存多个副本；副本丢失后，自动恢复</li>
<li>适合批处理————移动计算而非数据，数据位置暴露给计算框架</li>
<li>适合大数据处理————GB、TB甚至TB级数据百万规模以上的文件量，10K+节点</li>
<li>可构建在廉价机器上————通过多个副本提供可靠性，提供容错和恢复机制</li>
</ol>
<h3 id="2-hdfs缺点"><a href="#2-hdfs缺点" class="headerlink" title="2.hdfs缺点"></a>2.hdfs缺点</h3><ol>
<li>低延迟数据访问————比如毫秒级，低延迟与高吞吐率</li>
<li>小文件存取————占用NameNode大量内存，寻道时间超过读取时间</li>
<li>并发写入、文件随机修改————一个文件只能有一个写者，仅支持append（2.0）</li>
</ol>
<h3 id="hadoop集群部署安装"><a href="#hadoop集群部署安装" class="headerlink" title="hadoop集群部署安装"></a>hadoop集群部署安装</h3><a id="more"></a>
<p>环境：Linux操作系统（CentOS）、Hadoop安装包Linux版，VM虚拟机</p>
<ol>
<li>在虚拟机上安装CentOS系统（网卡配置为NAT模式）</li>
<li>配置静态ip地址，更改主机名和本地映射</li>
</ol>
<ul>
<li>在centOS的操作桌面，修改网卡配置（Manual）添加Addresses<blockquote>
<p>address(固定的ip)，netmask（255.255.255.0），gateWay（网关），dns和网关相同</p>
</blockquote>
</li>
<li>使用secureCRT工具连接到linux，通过sftp上传jdk和hadoop的安装包</li>
<li><p>修改主机名：vi /etc/sysconfig/network</p>
<blockquote>
<p>HOSTNAME=你的主机名（Hadoop-server-00）</p>
</blockquote>
</li>
<li><p>修改host配置文件：vi /etc/hosts</p>
<blockquote>
<p>192.168.102.200  hadoop-server-00<br>192.168.102.201  hadoop-server-01<br>192.168.102.202  hadoop-server-02</p>
</blockquote>
</li>
<li><p>关闭服务器的图形化界面：vi /etc/inittab</p>
<blockquote>
<p>d:3:initdefault:</p>
</blockquote>
</li>
<li><p>配置防火墙关闭</p>
<blockquote>
<p>service iptable stop 关闭防火墙<br>chkconfig iptable off 关闭开机启动防火墙</p>
</blockquote>
</li>
<li><p>配置完毕，reboot重启linux系统</p>
</li>
<li>创建软件安装目录： mkdir /usr/local/apps</li>
</ul>
<ol>
<li>安装jdk</li>
</ol>
<ul>
<li><p>解压上传的jdk文件</p>
<blockquote>
<p>tar -zxvf jdk的压缩包 -C /usr/local/apps(自定义的解压路径)</p>
</blockquote>
</li>
<li><p>修改配置文件 ：vi /etc/profile</p>
<blockquote>
<p>在末尾添加<br>export JAVA_HOME=/usr/local/apps/jdk目录<br>export PATH=$PATH:$JAVA_HOME/bin</p>
</blockquote>
</li>
<li><p>配置文件生效：source /etc/profile</p>
</li>
</ul>
<ol>
<li>安装hadoop</li>
</ol>
<ul>
<li>解压hadoop文件：<blockquote>
<p>tar -zxvf hadoop的压缩包 -C /usr/local/apps(自定义的解压路径)</p>
</blockquote>
</li>
<li>进入hadoop的安装目录（解压目录）</li>
<li><p>删除/share目录下的doc（帮助文档）【可选操作】在share目录下进行操作</p>
<blockquote>
<p>rm -rf doc</p>
</blockquote>
</li>
<li><p>进入hadoop安装目录下etc目录，再进入etc下的hadoop目录</p>
</li>
<li>修改hadoop-env.sh文件中的javaHome<blockquote>
<p>export JAVA_NOME=jdk安装目录（文件中间几行）</p>
</blockquote>
</li>
<li><p>修改 core-site.xml文件（hadoop运行时的公共配置）    </p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class="line">		&lt;value&gt;hdfs:<span class="comment">//hadoop-server-00:9000&lt;/value&gt;</span></div><div class="line">	&lt;/property&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;!-- 工作进程临时目录 --&gt;</div><div class="line">		&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">		&lt;value&gt;/usr/local/apps/hadoop安装目录/tmp&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>修改hdfs-site.xml文件（与hadfs相关）</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;!-- 默认副本数量 --&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;name&gt;dfs.replication&lt;/name&gt;</div><div class="line">		&lt;value&gt;3&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>修改mapred-site.xml</p>
<blockquote>
<p>首先去掉mapred-site.xml.templete的后缀名<br>mv mapred-site.xml.templete  mapred-site.xml    </p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;!-- mapreduce运行的平台 --&gt;</div><div class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">		&lt;value&gt;yarn&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改yarn-site.xml文件</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;!-- 配置集群的主节点 --&gt;</div><div class="line">		&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">		&lt;value&gt;hodoop-server-00&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">	&lt;property&gt;</div><div class="line">		&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">		&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">	&lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置从节点名称 vi slaves</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;hadoop-server-<span class="number">00</span>  </div><div class="line">&gt;hadoop-server-<span class="number">01</span>  </div><div class="line">&gt;……</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>启动hadoop集群服务（伪集群）</li>
</ol>
<ul>
<li>格式化namenode bin/hadoop namenode -format</li>
<li><p>手动启动服务,首先进入sbin目录</p>
<blockquote>
<p>./hadoop-daemon.sh start namenode<br>./hadoop-daemon.sh start datanode<br>./hadoop-daemon.sh start secondarynode<br>./yarn-daemon.sh start resourcemanager<br>./yarn-daemon.sh start nodemanager</p>
</blockquote>
</li>
<li><p>自动启动服务</p>
<ol>
<li>在主节点目录下生成秘钥对 ssh-keygen</li>
<li>拷贝秘钥到目标主机 ssh-copy-id 目标主机名</li>
</ol>
</li>
</ul>
<ol>
<li>配置hadoop多节点分布式服务<blockquote>
<p>1.配置无密码登录<br>2.scp -r /usr/local/apps/hadoop安装目录 目标主机：目标目录<br>3.删除从节点中的tmp目录<br>4.在主节点服务器上，修改slaves文件，将从节点加入集群。</p>
</blockquote>
</li>
<li>配置hadoop sbin目录到主机的profile文件<blockquote>
<p>export HADOOP_HOME=/usr/local/apps/hadoop-2.4.1<br>export PATH=$PATH:$HADOOP_HOME/sbin:$PATH:$HADOOP_HOME/bin</p>
</blockquote>
</li>
</ol>
<h2 id="使用java程序操作hdfs"><a href="#使用java程序操作hdfs" class="headerlink" title="使用java程序操作hdfs"></a>使用java程序操作hdfs</h2><ol>
<li>获得fileSystem对象<br><code>fs = FileSystem.get(new URI(&quot;hdfs://hadoop-server-00:9000&quot;), new Configuration(), &quot;root&quot;);</code></li>
<li>常用API<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下载文件到本地</span></div><div class="line"><span class="keyword">void</span> org.apache.hadoop.fs.FileSystem.copyToLocalFile(<span class="keyword">boolean</span> delSrc, Path src, Path dst, <span class="keyword">boolean</span> useRawLocalFileSystem) <span class="keyword">throws</span> IOException</div><div class="line"><span class="comment">//新建文件夹	  </span></div><div class="line"><span class="keyword">boolean</span> org.apache.hadoop.fs.FileSystem.mkdirs(Path f) <span class="keyword">throws</span> IOException</div><div class="line"><span class="comment">//判断文件是否存在</span></div><div class="line"><span class="keyword">boolean</span> org.apache.hadoop.fs.FileSystem.exists(Path arg0) <span class="keyword">throws</span> IOException</div><div class="line"><span class="comment">//上传文件到hdfs</span></div><div class="line"><span class="keyword">void</span> org.apache.hadoop.fs.FileSystem.copyFromLocalFile(Path src, Path dst) <span class="keyword">throws</span> IOException</div><div class="line"><span class="comment">//查看文件系统状态</span></div><div class="line">RemoteIterator&lt;LocatedFileStatus&gt; org.apache.hadoop.fs.FileSystem.listFiles(Path f, <span class="keyword">boolean</span> recursive) <span class="keyword">throws</span> FileNotFoundException, IOException</div><div class="line"><span class="comment">//使用io下载文件</span></div><div class="line">FSDataInputStream in = fs.open(<span class="keyword">new</span> Path(<span class="string">"test1.htm"</span>));</div><div class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"f:/deom.txt"</span>);</div><div class="line">IOUtils.copyBytes(in, out, <span class="keyword">new</span> Configuration());</div><div class="line">IOUtils.closeStream(in);</div><div class="line">IOUtils.closeStream(out);</div><div class="line"><span class="comment">//使用io操作hdfs时，设置偏移量</span></div><div class="line"><span class="keyword">void</span> org.apache.hadoop.fs.FSDataInputStream.seek(<span class="keyword">long</span> desired) <span class="keyword">throws</span> IOException</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="hadoop的rpc框架"><a href="#hadoop的rpc框架" class="headerlink" title="hadoop的rpc框架"></a>hadoop的rpc框架</h2><ol>
<li><p>定义接口</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//RCP通信的两端共同遵守的协议（本质上就是业务实现类的接口）</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientNameNodeProtocal</span> </span>&#123;</div><div class="line">	<span class="comment">//RPC通信双方一致的版本号</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> versionID = <span class="number">1L</span>;</div><div class="line">	<span class="comment">//业务方法签名</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMetaData</span><span class="params">(String path)</span></span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写接口的业务实现类</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamNodeNameSystemImpl</span> <span class="keyword">implements</span> <span class="title">ClientNameNodeProtocal</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMetaData</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">		</div><div class="line">		<span class="comment">//many logic code to find the meta data in meta data pool</span></div><div class="line">		<span class="keyword">return</span> <span class="string">"&#123;/aa/bb/bian4.mp4;300M;[BLK_1,BLK_2,BLK_3];3;</span></div><div class="line"><span class="string">&#123;[BLK_1:DN-A,DN-B,DN-E],[BLK_2:DN-A,DN-B,DN-C],[BLK_3:DN-A,DN-D,DN-E]&#125;&#125;"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>发布rpc服务</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishServiceTool</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> HadoopIllegalArgumentException, IOException </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//创建一个RPC服务builder</span></div><div class="line">	Builder builder = <span class="keyword">new</span> RPC.Builder(<span class="keyword">new</span> Configuration());</div><div class="line">	<span class="comment">//将要发布的服务的信息设置到builder中</span></div><div class="line">	builder.setBindAddress(<span class="string">"spark01"</span>).setPort(<span class="number">10000</span>).setProtocol(ClientNameNodeProtocal.class).setInstance(<span class="keyword">new</span> NamNodeNameSystemImpl());</div><div class="line">	</div><div class="line">	<span class="comment">//用builder构建出一个socket服务</span></div><div class="line">	Server server = builder.build();</div><div class="line">	<span class="comment">//将服务启动，就可以等待客户端请求</span></div><div class="line">	server.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端访问rpc服务</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;		</div><div class="line">		<span class="comment">//首先用RPC框架获得要调用的远端服务的引用（动态代理对象）</span></div><div class="line">		ClientNameNodeProtocal namenodeImpl = RPC.getProxy(ClientNameNodeProtocal.class, <span class="number">1L</span>, <span class="keyword">new</span> InetSocketAddress(<span class="string">"spark01"</span>,<span class="number">10000</span>), <span class="keyword">new</span> Configuration());</div><div class="line">		<span class="comment">//因为这个动态代理对象实现了业务类的接口，所以可以直接通过这个引用来调用业务类的实现方法(本质上，具体实现在远端，走的是socket通信请求)</span></div><div class="line">		String metaData = namenodeImpl.getMetaData(<span class="string">"/aa/bb/bian4.mp4"</span>);</div><div class="line">		</div><div class="line">		System.out.println(metaData);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="mapreduce框架计算编程"><a href="#mapreduce框架计算编程" class="headerlink" title="mapreduce框架计算编程"></a>mapreduce框架计算编程</h2><ol>
<li>导入hadoop-common包(工具包和rpc包)，mapreduce包，hdfs包</li>
<li>编写mapper（继承org.apache.hadoop.mapreduce.Mapper），重写mapper方法，且需要确定几个泛型。<br>KEYIN,VALUEIN,KEYOUT,VALUEOUT</li>
</ol>
<ul>
<li>KEYIN:输入KV数据对中的Key的数据类型</li>
<li>VALUEIN:输入KV数据对中的vlaue的数据类型</li>
<li>KEYOUT:输出KV数据中key的数据类型</li>
<li>VALUEOUT:输出KV数据中vlaue的数据类型  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowCountMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">FlowBean</span>&gt;</span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">		<span class="comment">//使用工具类，切分一行中的数据</span></div><div class="line">		String[] field = StringUtils.split(value.toString(),<span class="string">"\t"</span>);</div><div class="line">		</div><div class="line">		<span class="comment">//增强代码健壮性，如果一行中的字段数量少，不读，减少报错内容</span></div><div class="line">		<span class="keyword">if</span>(field.length &gt; <span class="number">4</span>)&#123;</div><div class="line">			String phone = field[<span class="number">1</span>];</div><div class="line">			<span class="keyword">long</span> upFlow =Long.parseLong(field[field.length -<span class="number">3</span>]);</div><div class="line">			<span class="keyword">long</span> dFlow = Long.parseLong(field[field.length -<span class="number">2</span>]);</div><div class="line">			</div><div class="line">			FlowBean bean = <span class="keyword">new</span> FlowBean(upFlow, dFlow);</div><div class="line">			context.write(<span class="keyword">new</span> Text(phone), bean);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>编写reducer类，继承（org.apache.hadoop.mapreduce.Reducer）类，重写reduce方法。泛型类型和mapper中相同</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;FlowBean&gt; values, Context context)</span></span></div><div class="line"><span class="function">	<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">	<span class="comment">//准备容器</span></div><div class="line">	<span class="keyword">long</span> sumUpFlow = <span class="number">0</span>;</div><div class="line">	<span class="keyword">long</span> sumDFlow = <span class="number">0</span>;</div><div class="line">	<span class="comment">//遍历数据</span></div><div class="line">	<span class="keyword">for</span> (FlowBean value : values) &#123;</div><div class="line">		sumUpFlow += value.getUpFlow();</div><div class="line">		sumDFlow += value.getdFlow();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	FlowBean bean = <span class="keyword">new</span> FlowBean(sumUpFlow, sumDFlow);</div><div class="line">	context.write(key, bean);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写客户端，submitter，hadoop通过这个类将mapper和reducer发布到不同的hadoop主机上，运行算法，得出结果。</p>
<ol>
<li>需要设定jar路径，告诉hadoopmapper和reducer的位置</li>
<li>需要设定mapper类，</li>
<li>需要设定reducer类，</li>
<li>需要确定map阶段输出的KV类型</li>
<li>需要确定（最终）reducer阶段输出的KV类型</li>
<li>需要确定数据来源位置</li>
<li>需要确定结果的存放路径</li>
<li>发布服务 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">//准备对象</span></div><div class="line">	Job flowCountJob = Job.getInstance(<span class="keyword">new</span> Configuration());</div><div class="line">	<span class="comment">//设置路径</span></div><div class="line">	flowCountJob.setJarByClass(FlowCountSubmitter.class);</div><div class="line">	</div><div class="line">	<span class="comment">//设置mapper和reducer</span></div><div class="line">	flowCountJob.setMapperClass(FlowCountMapper.class);</div><div class="line">	flowCountJob.setReducerClass(FlowCountReducer.class);</div><div class="line">	</div><div class="line">	<span class="comment">//设置mapper阶段的输出类型</span></div><div class="line">	flowCountJob.setMapOutputValueClass(FlowBean.class);</div><div class="line">	flowCountJob.setMapOutputKeyClass(Text.class);</div><div class="line">	</div><div class="line">	<span class="comment">//设置最终的输出类型</span></div><div class="line">	flowCountJob.setOutputKeyClass(Text.class);</div><div class="line">	flowCountJob.setMapOutputValueClass(FlowBean.class);</div><div class="line">	</div><div class="line">	<span class="comment">//设置数据源</span></div><div class="line">	FileInputFormat.setInputPaths(flowCountJob, args[<span class="number">0</span>]);</div><div class="line">	FileOutputFormat.setOutputPath(flowCountJob, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">	</div><div class="line">	<span class="comment">//将job发布到hadoop集群中</span></div><div class="line">	flowCountJob.waitForCompletion(<span class="keyword">true</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<h3 id="如果需要传递的KV类型中有自定义的bean，bean需要实现序列化接口（writable）"><a href="#如果需要传递的KV类型中有自定义的bean，bean需要实现序列化接口（writable）" class="headerlink" title="如果需要传递的KV类型中有自定义的bean，bean需要实现序列化接口（writable）"></a>如果需要传递的KV类型中有自定义的bean，bean需要实现序列化接口（writable）</h3><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//反序列化方法</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	upFlow = in.readLong();</div><div class="line">	dFlow = in.readLong();</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="comment">//序列化方法</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	out.writeLong(upFlow);</div><div class="line">	out.writeLong(dFlow);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="重写改实体类javabean的tostring-方法，确定最终输出形式"><a href="#重写改实体类javabean的tostring-方法，确定最终输出形式" class="headerlink" title="重写改实体类javabean的tostring() 方法，确定最终输出形式"></a>重写改实体类javabean的tostring() 方法，确定最终输出形式</h3><h2 id="分省统计手机号的流量消耗"><a href="#分省统计手机号的流量消耗" class="headerlink" title="分省统计手机号的流量消耗"></a>分省统计手机号的流量消耗</h2><ol>
<li><p>首先需要写一个partition类，该类继承partitioner类，确定对maper中的数据的分类处理结果有几个，根据返回值数量确定</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//电话号码前三位和省份代码对应的字典对象，真实开发需要从数据库中调取数据</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String,Integer&gt; provinceMap = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</div><div class="line"><span class="comment">//初始化字典数据</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">	provinceMap.put(<span class="string">"136"</span>,<span class="number">0</span>);</div><div class="line">	provinceMap.put(<span class="string">"137"</span>,<span class="number">1</span>);</div><div class="line">	provinceMap.put(<span class="string">"138"</span>,<span class="number">2</span>);</div><div class="line">	provinceMap.put(<span class="string">"139"</span>,<span class="number">3</span>);</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text phone, FlowBean bean, <span class="keyword">int</span> numberReducerTask)</span> </span>&#123;</div><div class="line">	<span class="comment">//获取开头三个数字</span></div><div class="line">	String start = phone.toString().substring(<span class="number">0</span>,<span class="number">3</span>);</div><div class="line">	<span class="comment">//查找匹配内容的省份代码</span></div><div class="line">	Integer provinceNum = provinceMap.get(start);</div><div class="line">	<span class="comment">//返回结果</span></div><div class="line">	<span class="keyword">if</span>(provinceNum == <span class="keyword">null</span>) provinceNum = <span class="number">4</span>;</div><div class="line">	<span class="keyword">return</span> provinceNum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>在submitter中设置reducer处理器的数量<strong>有几个处理器就会在结果路径中创建几个结果文件</strong></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置的数量应该和partitioner中结果的数量相对应，多了浪费空间，少了程序报错</span></div><div class="line">flowCountJob.setNumReduceTasks(<span class="number">5</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>在shuffle的处理过程中，可以对主键进行排序。如果是自定义的bean类型需要实现WritableComparable接口，重写compareto方法。</p>
</li>
</ol>
<p><strong>shuffl是map和reduce中间数据调度&lt;机制&gt;过程，主要包含:缓存，分区，排序</strong></p>
<h3 id="hadoop的决定机制"><a href="#hadoop的决定机制" class="headerlink" title="hadoop的决定机制"></a>hadoop的决定机制</h3><ol>
<li>reduce task数量的决定机制:<ul>
<li>业务逻辑需要，需要配置partitioner的返回值</li>
<li>数据量大小（数据非常大的时候需要多个reduce分担压力）</li>
</ul>
</li>
<li>map task数量的决定机制：<ul>
<li>切片机制：<blockquote>
<p>Mapreduce框架中默认的切片机制：<br>TextInputFormat.getSplits()继承自FileInputFormat.getSplits()<br>通常切片大小和hdfs中设置的block的大小一致</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="mapReduce编程练习"><a href="#mapReduce编程练习" class="headerlink" title="mapReduce编程练习"></a>mapReduce编程练习</h2><h4 id="1-查看两个人的共同好友"><a href="#1-查看两个人的共同好友" class="headerlink" title="1.查看两个人的共同好友"></a>1.查看两个人的共同好友</h4><ol>
<li>原始数据：每个人的好友列表 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A:B,C,D,F,E,O</div><div class="line">B:A,C,E,K</div><div class="line">C:F,A,D,I</div><div class="line">D:A,E,F,L</div><div class="line">E:B,C,D,M,L</div><div class="line">F:A,B,C,D,E,O,M</div><div class="line">G:A,C,D,E,F</div><div class="line">H:A,C,D,E,O</div><div class="line">I:A,O</div><div class="line">J:B,O</div><div class="line">K:A,C,D</div><div class="line">L:D,E,F</div><div class="line">M:E,F,G</div><div class="line">O:A,H,I,J</div><div class="line">……</div></pre></td></tr></table></figure>
</li>
</ol>
<!-- -->
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">输出结果：每个人和其他各人所拥有的功能好友</div><div class="line">A-B	C,E,</div><div class="line">A-C	D,F,</div><div class="line">A-D	E,F,</div><div class="line">A-E	B,C,D,</div><div class="line">A-F	B,C,D,E,O,</div><div class="line">A-G	C,D,E,F,</div><div class="line">A-H	C,D,E,O,</div><div class="line">A-I	O,</div><div class="line">A-J	B,O,</div><div class="line">A-K	C,D,</div><div class="line">A-L	D,E,F,</div><div class="line">A-M	E,F,</div><div class="line">B-C	A,</div><div class="line">B-D	A,E,</div><div class="line">……</div></pre></td></tr></table></figure>
</code></pre><ol>
<li><p>解题思路：<br>根据结果倒退：  </p>
<ol>
<li>结果要求，求出共同好友—关键在共同好友  </li>
<li><p>首先找到每个人都在谁的好友列表中，结果示例如下 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;C ： a,b,c,d,e --&gt;c是(ab)(ac)(ad)(ae)……的共同好友  </div><div class="line">&gt;F ： a,d,e --&gt;F是（ad）(ae)(de)的共同好友</div></pre></td></tr></table></figure>
</li>
<li><p>所以(ad)的共同好友包含c和f</p>
</li>
<li>在mapper中获得（ad,d）样式的键值对，在reducer中处理，将值叠加</li>
<li>向前推，先获得C ： a,b,c,d,e </li>
<li>加一个阶段，先求出c都在谁的好友列表中出现了</li>
<li>根据所给数据：A:B,C,D,F,E,O–&gt;(b,a)(b,c)的kV对</li>
<li>在mapper中,将数据整合</li>
<li>整理以上思路求解</li>
</ol>
</li>
</ol>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><p>hadoop将处理数据时需要用到的文件，共享到hadoop集群中。mapper自动请求，处理<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Mapper&lt;LongWritable, Text, NullWritable, JoinProduct&gt;.Context context)</span></span></div><div class="line"><span class="function">		<span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">	<span class="comment">//普通的文件读取操作</span></div><div class="line">	BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"iteminfo.txt"</span>));</div><div class="line">	</div><div class="line">	String line = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">		</div><div class="line">		String[] fields = line.split(<span class="string">","</span>);</div><div class="line">		itemInfo.put(fields[<span class="number">0</span>], fields[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/20/Apache%20shiro/</url>
      <content type="html"><![CDATA[<h2 id="apache-shiro-权限控制和缓存框架ehcache的使用"><a href="#apache-shiro-权限控制和缓存框架ehcache的使用" class="headerlink" title="apache shiro(权限控制和缓存框架ehcache的使用)"></a>apache shiro(权限控制和缓存框架ehcache的使用)</h2><h4 id="实现权限控制三种方式"><a href="#实现权限控制三种方式" class="headerlink" title="实现权限控制三种方式:"></a>实现权限控制三种方式:</h4><ol>
<li>spring security</li>
<li>apache shiro</li>
<li>自己写权限框架<h3 id="shiro-的结构："><a href="#shiro-的结构：" class="headerlink" title="shiro 的结构："></a>shiro 的结构：</h3></li>
</ol>
<ul>
<li>Authentication 用户登录</li>
<li>Authorization 授权</li>
<li>Cryptography 安全数据加密</li>
<li>Session Management 会话管理</li>
<li>Web Integration Web 系统集成</li>
<li>Interations 集成其他应用<h3 id="shiro的运行主要流程"><a href="#shiro的运行主要流程" class="headerlink" title="shiro的运行主要流程"></a>shiro的运行主要流程</h3></li>
<li>application code</li>
<li>subject（the current user）</li>
<li>shiro SecurityManager (manages all subject)</li>
<li>Realm (access your security data)<br>流程：应用程序–subject–securityManger–realm–安全数据<h3 id="shiro权限控制四中方式"><a href="#shiro权限控制四中方式" class="headerlink" title="shiro权限控制四中方式"></a>shiro权限控制四中方式</h3></li>
</ul>
<ol>
<li>配置filter实现url级别权限控制</li>
<li>配置代理，基于注解实现细粒度权限控制</li>
<li>在jsp页面中使用shiro自定义标签控制</li>
<li>程序中通过subject编程实现</li>
<li><a id="more"></a>
<h4 id="url权限控制（常用）"><a href="#url权限控制（常用）" class="headerlink" title="url权限控制（常用）"></a>url权限控制（常用）</h4></li>
</ol>
<ul>
<li><p>anon 未认证可以访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/login.html* = anon    登录页面所有人都可以访问</div></pre></td></tr></table></figure>
</li>
<li><p>authc 认证后可以访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/index.html = authc		主页是需要登录后访问的</div></pre></td></tr></table></figure>
</li>
<li><p>perms 需要特定的权限访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/pages/base/courier.html* = perms[courier:list]   ：冒号代表子权限</div></pre></td></tr></table></figure>
</li>
<li><p>roles 需要特定的角色访问</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/pages/base/area.html* = roles[base]</div></pre></td></tr></table></figure>
</li>
<li><p>user 需要特定的用户访问</p>
</li>
<li>reset 根据指定的http请求访问<h2 id="粗粒度URL级别权限控制"><a href="#粗粒度URL级别权限控制" class="headerlink" title="粗粒度URL级别权限控制"></a>粗粒度URL级别权限控制</h2></li>
</ul>
<ol>
<li><p>在pom文件中引入shiro的依赖  </p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置web.xml文件</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--在spring配置文件中需要有同名的bean存在--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置applicationContext-shiro.xml</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置Shiro核心Filter  --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> </span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 安全管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 未认证，跳转到哪个页面  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 登录页面页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"/index.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 认证后，没有权限跳转页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.html"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- shiro URL控制过滤器规则  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">			/login.html* = anon</div><div class="line">			/user_login.action* = anon</div><div class="line">			/validatecode.jsp* = anon</div><div class="line">			/css/** = anon</div><div class="line">			/js/** = anon</div><div class="line">			/images/** = anon</div><div class="line">			/services/** = anon </div><div class="line">			/pages/base/courier.html* = perms[courier:list]</div><div class="line">			/pages/base/area.html* = roles[base]</div><div class="line">			/** = authc</div><div class="line">		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在applicationContext-shiro.xml中配置安全管理器</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">&lt;!-- 安全管理器  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> </span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 自定义的realm 需要交于spring管理 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"bosRealm"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span></span></div><div class="line"><span class="tag">			<span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>UserAction 中得到subject对象，执行login</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line">AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(model.getUsername(), model.getPassword());</div><div class="line">subject.login(token);</div></pre></td></tr></table></figure>
</li>
<li><p>subject 调用securityManager，manager调用自定义的realm安全数据（自定义的realm继承AuthorizingRealm）</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BosRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Autowired</span>	</div><div class="line">	<span class="keyword">private</span> UserService userService;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> RoleService roleService;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> PermissionService perssionService;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"shiro 授权管理..."</span>);</div><div class="line">		SimpleAuthorizationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</div><div class="line">		<span class="comment">//根据当前登陆用户查询对象角色和权限</span></div><div class="line">		Subject subject = SecurityUtils.getSubject();</div><div class="line">		User user = (User) subject.getPrincipal();</div><div class="line">		<span class="comment">//调用业务层，查询角色</span></div><div class="line">		List&lt;Role&gt; roles = roleService.findByUser(user);</div><div class="line">		<span class="keyword">for</span> (Role role : roles) &#123;</div><div class="line">			authenticationInfo.addRole(role.getKeyword());</div><div class="line">		&#125;</div><div class="line">		List&lt;Permission&gt; persssion = perssionService.findByUser(user);</div><div class="line">		<span class="keyword">for</span> (Permission permission : persssion) &#123;</div><div class="line">			authenticationInfo.addStringPermission(permission.getKeyword());</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//返回所有的角色和权限</span></div><div class="line">		<span class="keyword">return</span> authenticationInfo;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">		System.out.println(<span class="string">"shiro 认证管理..."</span>);</div><div class="line">		UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</div><div class="line">		User user = userService.findByUsername(usernamePasswordToken.getUsername());</div><div class="line">		<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//参数一：期望登录后保存在subject中的信息</span></div><div class="line">			<span class="comment">//参数二：如果返回为null，说明用户不存在</span></div><div class="line">			<span class="comment">//参数三：realm的名称</span></div><div class="line">			<span class="comment">// 表示用户不存在</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// 表示用户存在--回到securityManager中比对密码是否正确</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(),	getName());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中将自定义realm注入到securityManager中，使manager能够找到realm</p>
</li>
<li>认证时常见的异常：<ul>
<li>org.apache.shiro.authc.UnknownAccountException  用户名不存在</li>
<li>org.apache.shiro.authc.IncorrectCredentialsException 用户输入的密码不正确<h2 id="细粒度方法级别权限控制"><a href="#细粒度方法级别权限控制" class="headerlink" title="细粒度方法级别权限控制"></a>细粒度方法级别权限控制</h2></li>
</ul>
</li>
<li><p>配置applicationContext-shiro.xml激活注解</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启shiro注解模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line"><span class="tag">	<span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>开发常用的shiro方法上的权限注解【注解是加在ServiceImpl上的】</p>
<ul>
<li>@requireAuthentication（需要登录）</li>
<li>@RequireUser（是否被记忆）</li>
<li>@requireGuest（未登录时允许访问的）</li>
<li>@requireRoles（需要角色）</li>
<li>@requirePermissions（需要权限）</li>
<li>示例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"courier:add"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Courier courier)</span> </span>&#123;</div><div class="line">	courierRepository.save(courier);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>有时需要针对ServiceImpl进行代理<br>配置spring 的事务管理，以继承方式创建代理</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--注解管理事务--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置shiro的注解模式参数</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启shiro注解模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line"><span class="tag"><span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用shiro标签元素，实现页面元素的显示控制"><a href="#使用shiro标签元素，实现页面元素的显示控制" class="headerlink" title="使用shiro标签元素，实现页面元素的显示控制"></a>使用shiro标签元素，实现页面元素的显示控制</h2><ol>
<li><p>页面引入shiro标签库</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://shiro.apache.org/tags"</span> prefix=<span class="string">"shiro"</span> %&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用shiro标签实现显示的代码</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:add"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:edit"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:delete"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"courier:list"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"easyui-linkbutton"</span> &gt;</span>查询<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="在shiro中使用缓存框架（优化）"><a href="#在shiro中使用缓存框架（优化）" class="headerlink" title="在shiro中使用缓存框架（优化）"></a>在shiro中使用缓存框架（优化）</h2><p>使用缓存技术后，第一次从数据库中去取数据，第二次从缓存中取数据（缓存是内容中的速度快）</p>
<ol>
<li><p>spring和ehcache框架整合（导入依赖）</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置ehcache.xml(解压ehcahce-core.jar包，得到ehcache-failsafe.xml)</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span>/&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">defaultCache</span></span></div><div class="line"><span class="tag">           <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">           <span class="attr">eternal</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">           <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">maxElementsOnDisk</span>=<span class="string">"10000000"</span></span></div><div class="line"><span class="tag">           <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">           <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置spring整合ehcache</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 缓存配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ehcache对登录认证业务数据进行缓存"><a href="#ehcache对登录认证业务数据进行缓存" class="headerlink" title="ehcache对登录认证业务数据进行缓存"></a>ehcache对登录认证业务数据进行缓存</h3><ol>
<li><p>配置shiro整合ehcache完成授权数据缓存</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro封装cacheManager--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehCacheManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将shiro缓存管理器，注入到安全管理器中</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 安全管理器  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> </span></div><div class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"bosRealm"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"shiroCacheManager"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>对认证数据，授权数据，进行选择性缓存（配置realm bean）</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置realm --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bosRealm"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.bos.shiro.BosRealm"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"authorizationCacheName"</span> <span class="attr">value</span>=<span class="string">"bos"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="ehcache对普通业务数据进行缓存"><a href="#ehcache对普通业务数据进行缓存" class="headerlink" title="ehcache对普通业务数据进行缓存"></a>ehcache对普通业务数据进行缓存</h3><ol>
<li>常用的注解<ol>
<li>@Cacheable   设置缓存位置<ul>
<li>应用缓存区，对方法返回结果进行缓存，用于查询方法</li>
</ul>
</li>
<li>@CacheEvict  清空缓存<ul>
<li>清除缓存区数据，用于增加，修改、删除方法</li>
</ul>
</li>
</ol>
</li>
<li><p>配置spring缓存管理器，封装ehcache自带的CacheManager</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- spring 封装ehcache缓存管理器 --&gt;</div><div class="line">&lt;bean id=&quot;springCacheManager&quot; class=&quot;org.springframework.cache.ehcache.EhCacheCacheManager&quot;&gt;</div><div class="line">	&lt;property name=&quot;cacheManager&quot; ref=&quot;ehCacheManager&quot;&gt;&lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中引入cache的名称空间</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xmlns:cache="http://www.springframework.org/schema/cache"</div><div class="line">xsi:schemaLocation="</div><div class="line">http://www.springframework.org/schema/cache </div><div class="line">http://www.springframework.org/schema/cache/spring-cache.xsd "&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>激活spring缓存注解</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 激活spring 缓存注解--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"springCacheManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>注意点：需要进行缓存的数据要实现<strong>Serializable</strong>接口</p>
<h3 id="有参数的方法进行缓存"><a href="#有参数的方法进行缓存" class="headerlink" title="有参数的方法进行缓存"></a>有参数的方法进行缓存</h3></li>
<li>需要使用SpEL表达式–示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">@Cacheable(value=&quot;bos&quot;,key=&quot;#pageable.pageNum+&apos;_&apos;+#pageable.pageSize&quot;)</div><div class="line">public Page&lt;Courier&gt; findAll(Specification specification, Pageable pageable)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/20/apache%20poi/</url>
      <content type="html"><![CDATA[<h2 id="Apache-POI技术-读取和生成excel文件"><a href="#Apache-POI技术-读取和生成excel文件" class="headerlink" title="Apache POI技术 读取和生成excel文件"></a>Apache POI技术 读取和生成excel文件</h2><ol>
<li><p>读取excel文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">HSSFWorkbook workbook = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	workbook = <span class="keyword">new</span> HSSFWorkbook(<span class="keyword">new</span> FileInputStream(file));</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div><div class="line">	</div><div class="line">HSSFSheet sheet = workbook.getSheetAt(<span class="number">0</span>);</div><div class="line">	</div><div class="line">List&lt;Area&gt; areas = <span class="keyword">new</span> ArrayList&lt;Area&gt;();</div><div class="line">	</div><div class="line"><span class="keyword">for</span> (Row row : sheet) &#123;</div><div class="line">	System.out.println(<span class="string">"read data"</span>);</div><div class="line">	<span class="comment">// 跳过第一行</span></div><div class="line">	<span class="keyword">if</span> (row.getRowNum() == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 跳过空行</span></div><div class="line">	<span class="keyword">if</span> (row.getCell(<span class="number">0</span>) == <span class="keyword">null</span> || StringUtils.isBlank(row.getCell(<span class="number">0</span>).getStringCellValue())) &#123;</div><div class="line">		<span class="keyword">continue</span>;</div><div class="line">	&#125;</div><div class="line">	Area area = <span class="keyword">new</span> Area();</div><div class="line">	</div><div class="line">	area.setId(row.getCell(<span class="number">0</span>).getStringCellValue());</div><div class="line">	area.setProvince(row.getCell(<span class="number">1</span>).getStringCellValue());</div><div class="line">	area.setCity(row.getCell(<span class="number">2</span>).getStringCellValue());</div><div class="line">	area.setDistrict(row.getCell(<span class="number">3</span>).getStringCellValue());</div><div class="line">	area.setPostcode(row.getCell(<span class="number">4</span>).getStringCellValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>生成excel文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">List&lt;WayBill&gt; wayBills = wayBillService.findWayBills(model);</div><div class="line"></div><div class="line">HSSFWorkbook hssfWorkbook = <span class="keyword">new</span> HSSFWorkbook();</div><div class="line">HSSFSheet sheet = hssfWorkbook.createSheet(<span class="string">"运单数据"</span>);</div><div class="line"></div><div class="line"><span class="comment">//表头</span></div><div class="line">HSSFRow headRow = sheet.createRow(<span class="number">0</span>);</div><div class="line">headRow.createCell(<span class="number">0</span>).setCellValue(<span class="string">"运单号"</span>);</div><div class="line">headRow.createCell(<span class="number">1</span>).setCellValue(<span class="string">"寄件人"</span>);</div><div class="line">headRow.createCell(<span class="number">2</span>).setCellValue(<span class="string">"寄件人电话"</span>);</div><div class="line">headRow.createCell(<span class="number">3</span>).setCellValue(<span class="string">"寄件人地址"</span>);</div><div class="line">headRow.createCell(<span class="number">4</span>).setCellValue(<span class="string">"收件人"</span>);</div><div class="line">headRow.createCell(<span class="number">5</span>).setCellValue(<span class="string">"收件人电话"</span>);</div><div class="line">headRow.createCell(<span class="number">6</span>).setCellValue(<span class="string">"收件人地址"</span>);</div><div class="line"></div><div class="line"><span class="comment">//表格数据</span></div><div class="line"><span class="keyword">for</span> (WayBill wayBill: wayBills) &#123;</div><div class="line">	HSSFRow dataRow = sheet.createRow(sheet.getLastRowNum()+<span class="number">1</span>);</div><div class="line">	dataRow.createCell(<span class="number">0</span>).setCellValue(wayBill.getWayBillNum());</div><div class="line">	dataRow.createCell(<span class="number">1</span>).setCellValue(wayBill.getSendName());</div><div class="line">	dataRow.createCell(<span class="number">2</span>).setCellValue(wayBill.getSendMobile());</div><div class="line">	dataRow.createCell(<span class="number">3</span>).setCellValue(wayBill.getSendAddress());</div><div class="line">	dataRow.createCell(<span class="number">4</span>).setCellValue(wayBill.getRecName());</div><div class="line">	dataRow.createCell(<span class="number">5</span>).setCellValue(wayBill.getRecMobile());</div><div class="line">	dataRow.createCell(<span class="number">6</span>).setCellValue(wayBill.getRecAddress());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> poi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（QRcode,fileReader）]]></title>
      <url>/2017/08/20/code004/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=381433&auto=1&height=66"></iframe>

<h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><h3 id="使用js，在本地生成二维码"><a href="#使用js，在本地生成二维码" class="headerlink" title="使用js，在本地生成二维码"></a>使用js，在本地生成二维码</h3><p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank" rel="external">QRcode的基本介绍</a><br>基本使用方法，最终生成的是h5的一个canvas元素，不能选中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery.qrcode/1.0/jquery.qrcode.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;div id=<span class="string">"code"</span>&gt;&lt;/div&gt; </div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="string">"#code"</span>).qrcode(&#123; </div><div class="line">    render: <span class="string">"table"</span>, <span class="comment">//table方式 </span></div><div class="line">    width: <span class="number">200</span>, <span class="comment">//宽度 </span></div><div class="line">    height:<span class="number">200</span>, <span class="comment">//高度 </span></div><div class="line">    text: <span class="string">"www.helloweba.com"</span> <span class="comment">//任意内容 </span></div><div class="line">&#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li><a href="https://segmentfault.com/q/1010000004988831" target="_blank" rel="external">如何将canvas标签中的内容编程img标签，显示到页面上</a>   </li>
<li><a href="http://blog.csdn.net/u011127019/article/details/51226104" target="_blank" rel="external">二维码和图片格式转换</a></li>
<li><a href="https://www.baidufe.com/item/65c055482d26ec59e27e.html" target="_blank" rel="external">将canvas中的内容变成img，并强制浏览器进行下载</a> </li>
</ol>
<h3 id="原生js中有一个fileReader对象可以实现在上传之前的图片预览"><a href="#原生js中有一个fileReader对象可以实现在上传之前的图片预览" class="headerlink" title="原生js中有一个fileReader对象可以实现在上传之前的图片预览"></a>原生js中有一个fileReader对象可以实现在上传之前的图片预览</h3><h3 id="多文件上传，-file中有一个multiple属性可以满足需求"><a href="#多文件上传，-file中有一个multiple属性可以满足需求" class="headerlink" title="多文件上传， file中有一个multiple属性可以满足需求"></a>多文件上传， file中有一个multiple属性可以满足需求</h3><h2 id="服务端技术"><a href="#服务端技术" class="headerlink" title="服务端技术"></a>服务端技术</h2><ol>
<li>oracle数据库中的特殊类型，使用“select * from table”的方式查询，得到的基础平台框架自动包装clog类型，在前台中解析为一个json对象类型。<ul>
<li>解决办法：使用sql语句解决<a href="http://blog.csdn.net/wumingqian_137229/article/details/48438959" target="_blank" rel="external">dbms_lob.substr(clob字段，4000,1)</a></li>
<li>或者使用java代码进行解决。</li>
</ul>
</li>
<li><a href="http://www.eclipse.org/webtools/" target="_blank" rel="external">web-tool-platform官方地址</a>  wtp是webtoolplant，web开发的平台工具</li>
<li><a href="http://blog.csdn.net/jbgtwang/article/details/44077853" target="_blank" rel="external">不安装WTP全包怎么添加Tomcat8到Eclipse Kepler中</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 前端 </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（git,ODS_压缩，解压缩、文件夹监听）]]></title>
      <url>/2017/08/20/code003/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>解释：项目由开发小组共同开发，由大部分人一起开发的部分叫做trunk（主干），当已经发布的程序出现问题，且trunk还在继续开发时，就需要新创建一个branch分支。</p>
<p>冲突：当开发人员因为不同需求需要修改同一项目中的相同文件位置时，就出现了冲突。<br>需要首先做对比，按照需求合并，然后强迫强制提交。</p>
<p>如果项目开发中出现了分支，当进行pull操作时，能够将所有分支上的内容下载到本地。<br>节点，项目开发到一个版本结束的时候需要打一个节点。标志项目的一个里程碑的结束。</p>
<h3 id="ODS之文件压缩和解压缩"><a href="#ODS之文件压缩和解压缩" class="headerlink" title="ODS之文件压缩和解压缩"></a>ODS之文件压缩和解压缩</h3><ol>
<li>解压缩</li>
<li>整理，建立文件夹，放文件</li>
<li>压缩</li>
<li>分发<a id="more"></a>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	File zipfile = <span class="keyword">new</span> File(<span class="string">"C:/Users/Administrator/Desktop/ods.zip"</span>);</div><div class="line">	String destDir = <span class="string">"C:/Users/Administrator/Desktop"</span>;</div><div class="line">	<span class="keyword">if</span> (StringUtils.isBlank(destDir)) &#123;</div><div class="line">		destDir = zipfile.getParent();</div><div class="line">	&#125;</div><div class="line">	destDir = destDir.endsWith(File.separator) ? destDir : destDir + File.separator;</div><div class="line">	ZipArchiveInputStream is = <span class="keyword">null</span>;</div><div class="line">	List&lt;String&gt; fileNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		is = <span class="keyword">new</span> ZipArchiveInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(zipfile), <span class="number">8192</span>));</div><div class="line">		ZipArchiveEntry entry = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">while</span> ((entry = is.getNextZipEntry()) != <span class="keyword">null</span>) &#123;</div><div class="line">			fileNames.add(entry.getName());</div><div class="line">			<span class="keyword">if</span> (entry.isDirectory()) &#123;</div><div class="line">				File directory = <span class="keyword">new</span> File(destDir, entry.getName());</div><div class="line">				directory.mkdirs();</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				OutputStream os = <span class="keyword">null</span>;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					os = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(destDir, entry.getName())),</div><div class="line">							<span class="number">8192</span>);</div><div class="line">					IOUtils.copy(is, os);</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					IOUtils.closeQuietly(os);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		<span class="keyword">throw</span> e;</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		IOUtils.closeQuietly(is);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (String string : fileNames) &#123;</div><div class="line">		<span class="keyword">if</span>(string.endsWith(<span class="string">"/"</span>))&#123;</div><div class="line">			System.out.println(<span class="string">"文件夹："</span>+string);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			System.out.println(<span class="string">"文    件："</span>+string);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	System.out.println(<span class="string">"finished"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>主要是流的变化和处理，写出时是按照，压缩文件为一个整体的思想进行写出的所以不需要运用递归的写法将数据写出<br>压缩的时候相当于往里面写文件，需要递归地写。相当于把系统中的数据递归地写到一个黑匣子里面</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	String srcFilepath = <span class="string">"C:\\Users\\Administrator\\Desktop\\ad"</span>;</div><div class="line">	File srcFile = <span class="keyword">new</span> File(srcFilepath);</div><div class="line">	String destFilepath = srcFile.getAbsolutePath() + <span class="string">".zip"</span>;</div><div class="line">	File destFile = <span class="keyword">new</span> File(destFilepath);</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (srcFile.exists()) &#123;</div><div class="line">		ZipArchiveOutputStream out = <span class="keyword">new</span> ZipArchiveOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (srcFile.isDirectory()) &#123;</div><div class="line">				File[] files = srcFile.listFiles();</div><div class="line">				<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">					zip(srcFile, file, out);</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile), <span class="number">8192</span>);</div><div class="line">					ZipArchiveEntry entry = <span class="keyword">new</span> ZipArchiveEntry(srcFile.getName());</div><div class="line">					entry.setSize(srcFile.length());</div><div class="line">					out.putArchiveEntry(entry);</div><div class="line">					IOUtils.copy(is, out);</div><div class="line">					out.closeArchiveEntry();</div><div class="line">				&#125; <span class="keyword">finally</span> &#123;</div><div class="line">					IOUtils.closeQuietly(is);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			IOUtils.closeQuietly(out);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">(File root, File parent, ZipArchiveOutputStream zipArchiveOutputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="keyword">if</span> (parent.exists()) &#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (parent.isDirectory()) &#123;</div><div class="line">			File[] files = parent.listFiles();</div><div class="line">			<span class="keyword">for</span> (File file : files) &#123;</div><div class="line">				zip(root, file, zipArchiveOutputStream);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(parent), <span class="number">8192</span>);</div><div class="line">				ZipArchiveEntry entry = <span class="keyword">new</span> ZipArchiveEntry(parent,</div><div class="line">						parent.getAbsolutePath().replace(root.getAbsolutePath(), <span class="string">""</span>));</div><div class="line">				entry.setSize(parent.length());</div><div class="line">				zipArchiveOutputStream.putArchiveEntry(entry);</div><div class="line">				IOUtils.copy(is, zipArchiveOutputStream);</div><div class="line">				zipArchiveOutputStream.closeArchiveEntry();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				IOUtils.closeQuietly(is);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="ODS之文件内容监控"><a href="#ODS之文件内容监控" class="headerlink" title="ODS之文件内容监控"></a>ODS之文件内容监控</h3><p>需要使用Java.io 包中的文件和 commons.io 的子包monitor包中的文件观察类和文件监听类<br>可以实现对文件和文件夹的的监听。包括文件的创建，文件的删除</p>
<ol>
<li>监听开启后，每隔一段时间进行一次观察和检测</li>
<li>监听需要确定检测的时间间隔</li>
<li>监听需要传入一个观察者对象</li>
<li>监听需要传入一个监听者对象 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZJPFileMonitor</span> </span>&#123;  </div><div class="line">    FileAlterationMonitor monitor = <span class="keyword">null</span>;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZJPFileMonitor</span><span class="params">(<span class="keyword">long</span> interval)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        monitor = <span class="keyword">new</span> FileAlterationMonitor(interval);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String path, FileAlterationListener listener)</span> </span>&#123;  </div><div class="line">        FileAlterationObserver observer = <span class="keyword">new</span> FileAlterationObserver(<span class="keyword">new</span> File(path));  </div><div class="line">        monitor.addObserver(observer);  </div><div class="line">        observer.addListener(listener);  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">        monitor.stop();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        monitor.start();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">        ZJPFileMonitor m = <span class="keyword">new</span> ZJPFileMonitor(<span class="number">5000</span>);  </div><div class="line">        m.monitor(<span class="string">"E:\\filepath"</span>,<span class="keyword">new</span> ZJPFileListener());  </div><div class="line">        m.start();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<!-- -->
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZJPFileListener</span> <span class="keyword">implements</span> <span class="title">FileAlterationListener</span></span>&#123;</div><div class="line">			</div><div class="line">	ZJPFileMonitor monitor = <span class="keyword">null</span>;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</div><div class="line">		<span class="comment">//System.out.println("onStart");</span></div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryCreate</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryCreate:"</span> +  directory.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryChange</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryChange:"</span> + directory.getName());</div><div class="line">	&#125;	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDirectoryDelete</span><span class="params">(File directory)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onDirectoryDelete:"</span> + directory.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileCreate</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileCreate:"</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileChange</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileCreate : "</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFileDelete</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"onFileDelete :"</span> + file.getName());</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(FileAlterationObserver observer)</span> </span>&#123;</div><div class="line">		<span class="comment">//System.out.println("onStop");</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（svn,hibernate）]]></title>
      <url>/2017/08/20/code002/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>枚举类型：A,B,C,D;   可以有构造方法  可以有函数<br>A(1,2,3) 三个参数都是构造属性  属性和一些方法用来返回属性</li>
</ul>
<h2 id="svn项目导入-webRoot-gt-webContent"><a href="#svn项目导入-webRoot-gt-webContent" class="headerlink" title="svn项目导入(webRoot-&gt;webContent)"></a>svn项目导入(webRoot-&gt;webContent)</h2><h3 id="先导入到本地再导入到eclipse中"><a href="#先导入到本地再导入到eclipse中" class="headerlink" title="先导入到本地再导入到eclipse中"></a>先导入到本地再导入到eclipse中</h3><ol>
<li>先将项目内容复制到本地，将项目内容进行备份，将备份的数据与svn服务器的链接断开。</li>
<li>新建动态网页项目，注意将内容输出值进行修改，WebRoot/WEB-INF/classes  将项目的主要内容文件夹设置为webRoot。</li>
<li>最后将备份后的项目数据导入到本地集成开发环境中(以文件系统的方式)</li>
</ol>
<h3 id="使用集成开发环境中的svn插件进行项目检出"><a href="#使用集成开发环境中的svn插件进行项目检出" class="headerlink" title="使用集成开发环境中的svn插件进行项目检出"></a>使用集成开发环境中的svn插件进行项目检出</h3><ol>
<li>将项目导入到集成开发环境中，作为本地的项目导出</li>
<li>修改项目在本地路径中的配置文件，setting文件夹下的org.eclipse.wst.common.component,修改里面的source-path<br><code>&lt;wb-resource deploy-path=&quot;/&quot; source-path=&quot;/WebRoot&quot; tag=&quot;defaultRootSource&quot;/&gt;</code></li>
<li>修改项目根目录下的.classpath文件下的内容，修改path的值<br><code>&lt;classpathentry kind=&quot;output&quot; path=&quot;WebRoot/WEB-INF/classes&quot;/&gt;</code><h2 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h2><h3 id="Criteria-QBC-查询方法"><a href="#Criteria-QBC-查询方法" class="headerlink" title="Criteria  QBC 查询方法"></a>Criteria  QBC 查询方法</h3></li>
<li>criteria.add(crtierition)  criterion类的主要的三个子类：Example junction simpleExpression<a id="more"></a>
<h3 id="Criteria-和-DetachedCriteria"><a href="#Criteria-和-DetachedCriteria" class="headerlink" title="Criteria 和 DetachedCriteria"></a>Criteria 和 DetachedCriteria</h3></li>
</ol>
<p>CriteriaSpecification 是一个接口， Criteria 是CriteriaSpecifiction的子接口<br>DetachedCriteria是CriteriaSpecification的一个实现类<br>Criteria是在线查询，需要由HIbernate Sesison创建<br>DetachedCriteria是离线的，使用了装饰者模式，包装了一个CriteriaImpl Criteria的实现<br>Criteria可以<code>addOrder(Order.asc(&quot;field&quot;))</code>  <code>setMaxResult(50)</code></p>
<p>设置查询条件:使用Criterion 和 Projection</p>
<p>可以使用Criterion和Projection设置查询条件</p>
<p>Criterion条件是一个接口，实现类包括Example(例子)、Junction(连接)[conjunction disjunction]、SimpleExpression(简单表达式)</p>
<p>使用Restrictions工具类创建Criterion对象，可以创建除Example之外的其他类型的Criterion</p>
<p>Project主要有SimpleProjection、ProjectionList和Property三个实现<br>Property 是对某个字段进行查询条件设置，<code>Property.forName(&quot;color&quot;).in({数组});</code><br>（聚合函数）</p>
<p>DetachedCriteria 和Criteria之间的相互转换<br><code>detachedCriteria.getExecutableCriteria(Sesision)</code></p>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 服务端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术积累（ajax-sync，闭包）]]></title>
      <url>/2017/08/20/code001/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407002091&auto=0&height=66"></iframe>

<h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><ul>
<li><p>如何解决页面中具有相同id的对象的问题：如在两个页面中同时存在id为datagrid的表格，在对象后面添加.element();为对象ID添加时间戳  </p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">element: function() &#123;</div><div class="line">   var idStr = this.attr(&apos;id&apos;) + &apos;_&apos; + new Date().getTime();</div><div class="line">   this.attr(&apos;id&apos;, idStr);</div><div class="line">   return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编码风格：将同一类型的或者完成相似功能的函数，定义到统一对象中，方便调用</p>
</li>
<li><p>js中闭包的好处：</p>
<ul>
<li>什么是闭包</li>
<li>闭包就是能够在函数内部读取函数外部的变量的一座桥梁  </li>
<li>闭包的作用：  <ol>
<li>可以读取到函数内部的数据</li>
<li>闭包让变量始终存在于内存中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var name = &quot;The Window&quot;;   </div><div class="line">　　var object = &#123;   </div><div class="line">　　　　name : &quot;My Object&quot;,   </div><div class="line">　　　　getNameFunc : function()&#123;   </div><div class="line">　　　　　　return function()&#123;   </div><div class="line">　　　　　　　　return this.name;   </div><div class="line">　　　　　&#125;;   </div><div class="line">　　　　&#125;   </div><div class="line">&#125;;   </div><div class="line">alert(object.getNameFunc()());  //The Window</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><p>在匿名函数前面加上这些符号后，就把一个函数声明语句变成了一个函数表达式，是表达式就会在script标签中自动执行。</p>
</li>
<li>ajax请求中的asyn 该值默认为true，即进行同步请求，当该值为false时，该ajax请求将会被锁死,适用于异步请求之后的代码，需要用到此次异步请求中返回的数据。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;  </div><div class="line">        async: false,  </div><div class="line">        type : &quot;GET&quot;,  </div><div class="line">        url : &apos;tet.php&apos;,  </div><div class="line">        complete: function(msg)&#123;  </div><div class="line">            alert(&apos;complete&apos;);  </div><div class="line">        &#125;,  </div><div class="line">        success : function(data) &#123;  </div><div class="line">            alert(&apos;success&apos;);  </div><div class="line">            temp=data;  </div><div class="line">        &#125;  </div><div class="line">    &#125;);  </div><div class="line">    alert(temp+&apos;end&apos;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> code </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于hacker的信仰]]></title>
      <url>/2017/08/20/note/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=483671599&auto=0&height=66"></iframe>

<h2 id="hacker的信仰"><a href="#hacker的信仰" class="headerlink" title="hacker的信仰"></a>hacker的信仰</h2><ol>
<li>The world is full of fascinating problems waiting to be solved.</li>
<li>No problem should ever have to be solved twice.</li>
<li>Boredom and drudgery are evil.</li>
<li>Freedom is good.</li>
<li>Attitude is so subsititute for competence.<blockquote>
<p>1、这个世界充满了待解决的迷人问题<br>2、一个问题都不应该被解决两次<br>3、无趣和乏味的工作是犯罪<br>4、追求自由<br>5、态度不能代替能力（态度无法替代技术）</p>
</blockquote>
</li>
</ol>
<h3 id="程序设计基本原则"><a href="#程序设计基本原则" class="headerlink" title="程序设计基本原则"></a>程序设计基本原则</h3><pre><code>模块原则：使用简洁的接口拼合简单的部件
清晰原则：清晰胜于机巧
组合原则：设计时，考虑拼接组合
分离原则：策略同机制分离，接口同引擎分离
简洁原则：设计要简洁，复杂度能低则低
吝啬原则：除非确无他法，不要编写庞大的程序
透明性原则：设计要可见，以便审查和调试
健壮性原则：健壮性源于透明和简洁
通俗原则：接口设计避免标新立异
表示原则：把知识叠入数据以求逻辑质朴而健壮
缄默原则：如果一个程序没什么好说的，就沉默
经济原则：宁花机器一分，不花程序员一秒
补救原则：出现异常时，马上退出并给出足够的错误信息
生成原则：避免手工hack，尽量编写程序去生成程序
优化原则：雕琢前先要有原型，跑之前先学会走
多样原则：决不相信所谓“不二法门”的断言
扩展原则：设计着眼未来，未来总比预想来的快
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用工具网站介绍]]></title>
      <url>/2017/08/14/vpn_help/</url>
      <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=68450&auto=0&height=66"></iframe>

<h2 id="Common-sites"><a href="#Common-sites" class="headerlink" title="Common sites"></a>Common sites</h2><h3 id="网站索引导航"><a href="#网站索引导航" class="headerlink" title="网站索引导航"></a>网站索引导航</h3><ol>
<li><a href="http://taoxiaozhong.com/" target="_blank" rel="external">淘小众</a></li>
<li><a href="http://www.gogeeks.cn/" target="_blank" rel="external">极客导航</a></li>
<li><a href="https://s.geekbang.org/" target="_blank" rel="external">极客搜索</a><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3></li>
<li><a href="https://sdk.cn/news/4723" target="_blank" rel="external">免费科学上网镜像和工具</a></li>
<li><a href="https://pac.itzmx.com/" target="_blank" rel="external">浏览器代理科学上网</a><h3 id="壁纸下载网站"><a href="#壁纸下载网站" class="headerlink" title="壁纸下载网站"></a>壁纸下载网站</h3></li>
<li><a href="http://www.10wallpaper.com/" target="_blank" rel="external">tenBeauty</a></li>
<li><a href="http://sf.co.ua/" target="_blank" rel="external">Wallpapers</a><h3 id="vip视频解析网站"><a href="#vip视频解析网站" class="headerlink" title="vip视频解析网站"></a>vip视频解析网站</h3></li>
<li><a href="http://www.tufutv.com/" target="_blank" rel="external">屠夫网</a></li>
<li><a href="http://ifkdy.com" target="_blank" rel="external">疯狂影视搜索</a><a id="more"></a>
<h3 id="vip音乐解析网站"><a href="#vip音乐解析网站" class="headerlink" title="vip音乐解析网站"></a>vip音乐解析网站</h3></li>
<li><a href="http://www.liumingye.cn/tools/music/" target="_blank" rel="external">vip音乐解析</a></li>
<li><a href="http://music.liuzhijin.cn/" target="_blank" rel="external">音乐直连搜索</a></li>
<li><a href="http://www.66re.cn/vip/163.html" target="_blank" rel="external">全能vip音乐解析</a><h3 id="网站视频地址解析-另存为即下载"><a href="#网站视频地址解析-另存为即下载" class="headerlink" title="网站视频地址解析(另存为即下载)"></a>网站视频地址解析(另存为即下载)</h3></li>
<li><a href="http://www.flvurl.cn/Default.aspx" target="_blank" rel="external">点量视频解析</a></li>
<li><a href="http://savevideo.me/" target="_blank" rel="external">国外视频网站解析</a><h3 id="微信-amp-二维码"><a href="#微信-amp-二维码" class="headerlink" title="微信&amp;二维码"></a>微信&amp;二维码</h3></li>
<li><a href="http://cli.im/text" target="_blank" rel="external">草料二维码</a></li>
<li><a href="http://www.liantu.com/" target="_blank" rel="external">联图二维码</a></li>
<li><a href="http://jiema.wwei.cn/" target="_blank" rel="external">二维码在线解析</a></li>
<li><a href="http://www.vjietu.com/" target="_blank" rel="external">微信聊天界面生成工具</a></li>
<li><a href="http://bj.96weixin.com/" target="_blank" rel="external">微信公众号内容编辑工具</a><h2 id="Coder-sites"><a href="#Coder-sites" class="headerlink" title="Coder sites"></a>Coder sites</h2><h3 id="系统下载网站"><a href="#系统下载网站" class="headerlink" title="系统下载网站"></a>系统下载网站</h3></li>
<li><a href="http://www.imsdn.cn/" target="_blank" rel="external">windows操作系统镜像下载</a></li>
<li><a href="http://www.linuxdown.net/" target="_blank" rel="external">linux操作系统镜像下载</a></li>
<li><a href="http://blog.csdn.net/youlianying/article/details/5411521" target="_blank" rel="external">各系统官方网站列表</a><h3 id="开发资源网站"><a href="#开发资源网站" class="headerlink" title="开发资源网站"></a>开发资源网站</h3></li>
<li><a href="http://maven.aliyun.com/nexus/#welcome" target="_blank" rel="external">阿里巴巴mave私服_jar包下载</a></li>
<li><a href="http://cdn.code.baidu.com/" target="_blank" rel="external">百度静态资源库</a></li>
<li><a href="http://www.bootcdn.cn/" target="_blank" rel="external">bootCDN静态资源下载</a><h3 id="开发者讯息"><a href="#开发者讯息" class="headerlink" title="开发者讯息"></a>开发者讯息</h3></li>
<li><a href="https://toutiao.io/explore" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn/" target="_blank" rel="external">Infoq中国站</a></li>
<li><a href="https://www.oschina.net/" target="_blank" rel="external">开源中国</a><h3 id="网页浏览工具"><a href="#网页浏览工具" class="headerlink" title="网页浏览工具"></a>网页浏览工具</h3></li>
<li><a href="http://www.100ec.cn/zt/data/" target="_blank" rel="external">脚本之家在线工具</a></li>
<li><a href="http://tool.oschina.net/" target="_blank" rel="external">开源中国在线工具</a></li>
<li><a href="http://tool.lu/" target="_blank" rel="external">程序员工具箱</a><h2 id="Pmer-sites"><a href="#Pmer-sites" class="headerlink" title="Pmer sites"></a>Pmer sites</h2><h3 id="音乐电台"><a href="#音乐电台" class="headerlink" title="音乐电台"></a>音乐电台</h3></li>
<li><a href="http://51.ruyo.net/p/4681.html" target="_blank" rel="external">落网</a><h3 id="电商资讯"><a href="#电商资讯" class="headerlink" title="电商资讯"></a>电商资讯</h3></li>
<li><a href="http://www.ebrun.com/" target="_blank" rel="external">亿邦动力</a></li>
<li><a href="http://www.iresearch.cn/" target="_blank" rel="external">艾瑞网</a></li>
<li><a href="http://www.paidai.com/" target="_blank" rel="external">派代网</a></li>
<li><a href="http://www.100ec.cn/" target="_blank" rel="external">中国电子商务研究中心</a><h3 id="产品设计"><a href="#产品设计" class="headerlink" title="产品设计"></a>产品设计</h3></li>
<li><a href="http://www.woshipm.com/" target="_blank" rel="external">人人都是产品经理</a><h3 id="数据中心"><a href="#数据中心" class="headerlink" title="数据中心"></a>数据中心</h3></li>
<li><a href="http://www.cnnic.net.cn/" target="_blank" rel="external">中国互联网络信息中心</a></li>
<li><a href="http://www.100ec.cn/zt/data/" target="_blank" rel="external">中国电子商务数据中心</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发小笔记]]></title>
      <url>/2017/08/13/Code_note/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/ysydao/article/details/40181611" target="_blank" rel="external">产品经理小帖子</a></p>
<pre><code>精华内容摘要：
1、产品经理有一个毛病就是喜欢虚构一个功能出来，然后觉得用户一定要使用你的东西，不然就弄死他。  
2、我们做一个产品一定要抓住硬需求，也就是用户不用你这个东西他就觉得浑身难受。    
3、你又在想着怎么忽悠用户进来，然后再虐待他。
</code></pre><a id="more"></a>
<h2 id="行唐积分兑换系统基本分析"><a href="#行唐积分兑换系统基本分析" class="headerlink" title="行唐积分兑换系统基本分析"></a>行唐积分兑换系统基本分析</h2><h3 id="系统用户"><a href="#系统用户" class="headerlink" title="系统用户"></a>系统用户</h3><p><a href="#jump2">XXXX</a></p>
<ol>
<li>微信端用户（微信用户）<ul>
<li>用户绑定</li>
<li>积分查询</li>
<li>积分兑换</li>
</ul>
</li>
<li>服务端用户（前台柜员）<ul>
<li>积分规则查询</li>
<li>积分消费登记</li>
<li>积分预授权</li>
<li>积分冻结</li>
</ul>
</li>
<li>管理端用户（系统管理者）<ul>
<li>积分规则配置</li>
<li>商品管理</li>
<li>风险日志控制</li>
<li>活动，资讯，通知内容发布<h3 id="系统基本逻辑角色"><a href="#系统基本逻辑角色" class="headerlink" title="系统基本逻辑角色"></a>系统基本逻辑角色</h3></li>
</ul>
</li>
<li>用户角色实体<ul>
<li>微信用户</li>
<li>服务端用户</li>
<li>管理端用户</li>
</ul>
</li>
<li>积分规则实体<ul>
<li>基本积分规则</li>
<li>特殊积分规则</li>
</ul>
</li>
<li>日志风险实体<ul>
<li>各种风险的实体</li>
</ul>
</li>
<li>活动资讯实体<ul>
<li>新闻的标题，内容</li>
</ul>
</li>
<li>商品管理<ul>
<li>主要是商品的内容管理CMS<h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2></li>
</ul>
</li>
<li>需求分析<ul>
<li>主要是产品经理的工作</li>
<li>结果是输出PRD（产品需求文档），供开发者查阅</li>
</ul>
</li>
<li>概要设计<ul>
<li>基本处理流程</li>
<li>系统的组织结构</li>
<li>模块划分</li>
<li>功能分配</li>
<li>接口设计</li>
<li>数据结构设计</li>
<li>出错处理设计</li>
</ul>
</li>
<li>详细设计<ul>
<li>主要算法</li>
<li>数据结构</li>
<li>类的层次结构及调用关系</li>
</ul>
</li>
<li>编码</li>
<li>测试</li>
<li>软件交付</li>
<li>验收</li>
<li>运行维护</li>
<li>软件维护，软件升级，报废处理<h2 id="行唐积分商城后台管理系统"><a href="#行唐积分商城后台管理系统" class="headerlink" title="行唐积分商城后台管理系统"></a>行唐积分商城后台管理系统</h2><h3 id="开发计划–功能"><a href="#开发计划–功能" class="headerlink" title="开发计划–功能"></a>开发计划–功能</h3></li>
<li>商品列表查看</li>
<li>商品批量删除</li>
<li>商品上架/下架（逻辑删除）</li>
<li>商品删除</li>
<li>分页展示商品</li>
<li>商品名称检索</li>
<li>商品新增<ul>
<li>商品图片上传</li>
<li>商品分配列表导入（导入之后的工作？）</li>
<li>商品详情也页面编辑</li>
<li>新增加的商品是待上架的状态</li>
<li>新增商品后</li>
</ul>
</li>
<li>商品修改<ul>
<li>根据是否包含商品id进行判断，是否需要从后台读取</li>
<li>或新建一个新的页面专门进行数据修改的页面</li>
</ul>
</li>
<li>商品查看<ul>
<li>商品图片内容</li>
<li>商品描述详情（可能是个页面）</li>
<li>网点分配数量</li>
<li>控制按钮（上架商品或下架商品  那么删除商品呢？）</li>
<li>商品查看，提供商品二维码下载。</li>
</ul>
</li>
<li>商品库存数量审核<h3 id="使用js生成二维码并保存到本地"><a href="#使用js生成二维码并保存到本地" class="headerlink" title="使用js生成二维码并保存到本地"></a>使用js生成二维码并保存到本地</h3></li>
</ol>
<blockquote>
   <script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.js"></script>
   <script src="https://cdn.bootcss.com/jquery.qrcode/1.0/jquery.qrcode.min.js"></script>
   <div id="code"></div> 
    <script>
    $("#code").qrcode({ 
        render: "table", //table方式 
        width: 200, //宽度 
        height:200, //高度 
        text: "www.helloweba.com" //任意内容 
    });
    </script>

<p>使用QRcode生成二维码，需要引入两个包。<br>生成后</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000004988831" target="_blank" rel="external">将canvas标签中的内容编程img标签，显示到我页面上</a>  </p>
<p><a href="https://www.baidufe.com/item/65c055482d26ec59e27e.html" target="_blank" rel="external">将canvas中的内容变成img，并强制浏览器进行下载</a></p>
<p><a href="http://www.eclipse.org/webtools/" target="_blank" rel="external">web-tool-platform官方地址</a>  </p>
<p><a href="http://blog.csdn.net/jbgtwang/article/details/44077853" target="_blank" rel="external">不安装WTP全包怎么添加Tomcat8到Eclipse Kepler中</a></p>
<h3 id="项目请求地址记录"><a href="#项目请求地址记录" class="headerlink" title="项目请求地址记录"></a>项目请求地址记录</h3><ol>
<li>商品管理 <ul>
<li>商品列表 productList</li>
<li>添加商品 productAdd</li>
<li>查看商品 productDetail</li>
<li>库存审核 repertoryCheck</li>
</ul>
</li>
<li>积分查询intergral?page=intergralQuery</li>
<li>发布管理publishManager?page=list</li>
<li>managerSetting?page=index</li>
</ol>
<h2 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h2><ol>
<li>项目部署时的问题，ide不支持tomcat8，试图添加ide对tomcat8的支持。  未成功</li>
<li>添加菜单后，刷新后立即删除。原因是后台使用了ehcahe的缓存机制<ul>
<li>解决：去掉后台中使用的缓存机制</li>
</ul>
</li>
<li>添加菜单后，在管理员界面上不现实刚添加的菜单<ul>
<li>原因是未授权，需要在角色菜单栏中为角色添加授权</li>
</ul>
</li>
<li>生成产品的实体类，使用基础开发平台进行开发时出现问题，平台上的代码出现小问题。<ul>
<li>在配置文件加载前设置了属性值</li>
<li>修改，将读取配置文件的静态代码块提前</li>
</ul>
</li>
<li>oracle数据库中的特殊类型，使用“select * from table”的方式查询，得到的基础平台框架自动包装clog类型，在前台中解析为一个json对象类型。<ul>
<li>解决办法：使用sql语句解决<a href="http://blog.csdn.net/wumingqian_137229/article/details/48438959" target="_blank" rel="external">dbms_lob.substr(clob字段，4000,1)</a></li>
<li>或者使用java代码进行解决。</li>
<li>最好的解决办法是使用java，框架配置解决。（复用）</li>
</ul>
</li>
<li>商品状态formatter方法，添加一个js数组，根据status进行修改。</li>
</ol>
<pre><code>var status = [&quot;删除&quot;,&quot;上架&quot;,&quot;待上架&quot;,&quot;下架&quot;];  
return status[value]; 
</code></pre><ol>
<li>查看商品列表时，如果能将一整行的数据传过来，直接更新数据就行了。不用理会它是什么状态。</li>
<li>直接操作数字比操作字符方便</li>
<li>批量删除商品时，点击按钮时触发事件。需要使用闭包的特性进行处理。<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3></li>
<li>状态为删除的时候怎么处理？</li>
<li>文件别名的作用<h3 id="ibtatis-和hibernate的实体类扫描注解不同"><a href="#ibtatis-和hibernate的实体类扫描注解不同" class="headerlink" title="ibtatis 和hibernate的实体类扫描注解不同"></a>ibtatis 和hibernate的实体类扫描注解不同</h3><h3 id="kindeditor-和-easyui的冲突问题，在新建tab的时候"><a href="#kindeditor-和-easyui的冲突问题，在新建tab的时候" class="headerlink" title="kindeditor 和 easyui的冲突问题，在新建tab的时候"></a>kindeditor 和 easyui的冲突问题，在新建tab的时候</h3><h3 id="多文件上传，-file中有一个multiple属性可以满足需求"><a href="#多文件上传，-file中有一个multiple属性可以满足需求" class="headerlink" title="多文件上传， file中有一个multiple属性可以满足需求"></a>多文件上传， file中有一个multiple属性可以满足需求</h3><h3 id="原生js中有一个fileReader对象可以实现在上传之前的图片预览"><a href="#原生js中有一个fileReader对象可以实现在上传之前的图片预览" class="headerlink" title="原生js中有一个fileReader对象可以实现在上传之前的图片预览"></a>原生js中有一个fileReader对象可以实现在上传之前的图片预览</h3></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> work </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[个人博客第一弹：歌曲分享]]></title>
      <url>/2017/08/06/hello-world/</url>
      <content type="html"><![CDATA[<h3 id="歌曲"><a href="#歌曲" class="headerlink" title="歌曲"></a>歌曲</h3><p>这里是我平时喜欢听的一歌曲，分享给大家听。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=27890306&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=27646786&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=478725543&auto=0&height=66"></iframe><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%height=86" src="//music.163.com/outchain/player?type=2&id=165237&auto=0&height=66"></iframe><br><a id="more"></a><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%height=86" src="//music.163.com/outchain/player?type=2&id=26562739&auto=0&height=66"></iframe>
]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
